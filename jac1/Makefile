#
# set paths for header files and libraries
#

OP2		:= ../common
CUDA		:= $(CUDA_INSTALL_PATH)
INC		:= -I$(CUDA)/include -I$(OP2) -I.
LIB		:= -L$(CUDA)/lib64

#
# set flags for compilation and linking
#

CCFLAGS		:= -g -fPIC -DUNIX -Wall -Wextra
NVCCFLAGS	:= -g -G -arch=sm_20 -Xptxas=-v -use_fast_math
LIBS		:= $(LIB) -lcudart
OMP		:= -fopenmp -lgomp

#
# master to make all versions
#

all:		jac_seq jac_op jac_cuda

#
# simple sequential version
#

jac_seq:	jac.cpp $(OP2)/op_seq.cpp $(OP2)/op_datatypes.h
		g++ $(INC) -o jac_seq jac.cpp $(OP2)/op_seq.cpp

#
# x86 version using kernel files generated by op2.m
#

jac_op:		jac_op.cpp jac_kernels.cpp $(OP2)/op_datatypes.h \
                $(OP2)/op_lib.cu $(OP2)/op_lib.cpp \
		res_kernel.cpp update_kernel.cpp \
		res.h          update.h
		g++ $(INC) $(OMP) -o jac_op jac_op.cpp jac_kernels.cpp

#
# CUDA version using kernel files generated by op2.m
#

jac_cuda:	jac_op.o jac_kernels.o
		g++ -fPIC -o jac_cuda jac_op.o jac_kernels.o $(LIBS)

jac_op.o:	jac_op.cpp $(OP2)/op_datatypes.h Makefile
		g++ $(INC) $(CCFLAGS) -c -o jac_op.o jac_op.cpp

jac_kernels.o:	jac_kernels.cu $(OP2)/op_lib.cu \
                $(OP2)/op_datatypes.h  Makefile \
		res_kernel.cu update_kernel.cu  \
		res.h         update.h
		nvcc $(INC) $(NVCCFLAGS) -c -o jac_kernels.o jac_kernels.cu

#
# cleanup
#

clean:
		rm -f jac_seq jac_op jac_cuda jac_op.o jac_kernels.o
