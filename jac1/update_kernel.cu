// 
// auto-generated by op2.m on 11-Feb-2011 10:27:59 
//

// user function                                                                  
                                                                                  
__device__                                                                        
#include "update.h"                                                               
                                                                                  
                                                                                  
// CUDA kernel function                                                           
                                                                                  
__global__ void op_cuda_update(                                                   
  double *arg0,                                                                    
  double *arg1,                                                                    
  double *arg2,                                                                    
  double *arg3,                                                                    
  double *arg4,                                                                    
  int   offset_s,                                                                 
  int   set_size ) {                                                              
                                                                                  
  double arg3_l[1];                                                                
  for (int d=0; d<1; d++) arg3_l[d]=ZERO_double;                                   
  double arg4_l[1];                                                                
  for (int d=0; d<1; d++) arg4_l[d]=arg4[d+blockIdx.x*1];                         
                                                                                  
  // process set elements                                                         
                                                                                  
  for (int n=threadIdx.x+blockIdx.x*blockDim.x;                                   
       n<set_size; n+=blockDim.x*gridDim.x) {                                     
                                                                                  
    // user-supplied kernel call                                                  
                                                                                  
    update( arg0+n,                                                               
            arg1+n,                                                               
            arg2+n,                                                               
            arg3_l,                                                               
            arg4_l );                                                             
  }                                                                               
                                                                                  
  // global reductions                                                            
                                                                                  
  for(int d=0; d<1; d++) op_reduction<OP_INC>(&arg3[d+blockIdx.x*1],arg3_l[d]);   
  for(int d=0; d<1; d++) op_reduction<OP_MAX>(&arg4[d+blockIdx.x*1],arg4_l[d]);   
}                                                                                 
                                                                                  
                                                                                  
// host stub function                                                             
                                                                                  
void op_par_loop_update(char const *name, op_set set,                             
  op_dat arg0, int idx0, op_map map0, int dim0, char const *typ0, op_access acc0, 
  op_dat arg1, int idx1, op_map map1, int dim1, char const *typ1, op_access acc1, 
  op_dat arg2, int idx2, op_map map2, int dim2, char const *typ2, op_access acc2, 
  double *arg3h,int idx3, op_map map3, int dim3, char const *typ3, op_access acc3, 
  double *arg4h,int idx4, op_map map4, int dim4, char const *typ4, op_access acc4){
                                                                                  
  op_dat arg3 = {{0,0,"null"},0,0,0,(char *)arg3h,NULL,"double","gbl"};            
  op_dat arg4 = {{0,0,"null"},0,0,0,(char *)arg4h,NULL,"double","gbl"};            
                                                                                  
  if (OP_diags>2) {                                                               
    printf(" kernel routine w/o indirection:  update \n");                        
  }                                                                               
                                                                                  
  // initialise timers                                                            
                                                                                  
  double cpu_t1, cpu_t2, wall_t1, wall_t2;                                        
  timers(&cpu_t1, &wall_t1);                                                      
                                                                                  
  // set CUDA execution parameters                                                
                                                                                  
  int nblocks  = 200;                                                             
//  int nthread  = OP_block_size;                                                 
  int nthread  = 128;                                                             
                                                                                  
  // transfer global reduction data to GPU                                        
                                                                                  
  int maxblocks = nblocks;                                                        
                                                                                  
  int reduct_bytes = 0;                                                           
  int reduct_size  = 0;                                                           
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));                            
  reduct_size   = MAX(reduct_size,sizeof(double));                                 
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));                            
  reduct_size   = MAX(reduct_size,sizeof(double));                                 
                                                                                  
  reallocReductArrays(reduct_bytes);                                              
                                                                                  
  reduct_bytes = 0;                                                               
  arg3.dat   = OP_reduct_h + reduct_bytes;                                        
  arg3.dat_d = OP_reduct_d + reduct_bytes;                                        
  for (int b=0; b<maxblocks; b++)                                                 
    for (int d=0; d<1; d++)                                                       
      ((double *)arg3.dat)[d+b*1] = ZERO_double;                                    
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));                            
  arg4.dat   = OP_reduct_h + reduct_bytes;                                        
  arg4.dat_d = OP_reduct_d + reduct_bytes;                                        
  for (int b=0; b<maxblocks; b++)                                                 
    for (int d=0; d<1; d++)                                                       
      ((double *)arg4.dat)[d+b*1] = arg4h[d];                                      
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));                            
                                                                                  
  mvReductArraysToDevice(reduct_bytes);                                           
                                                                                  
  // work out shared memory requirements per element                              
                                                                                  
  int nshared = 0;                                                                
                                                                                  
  // execute plan                                                                 
                                                                                  
  int offset_s = nshared*OP_WARPSIZE;                                             
                                                                                  
  nshared = MAX(nshared*nthread,reduct_size*nthread);                             
                                                                                  
  op_cuda_update<<<nblocks,nthread,nshared>>>( (double *) arg0.dat_d,              
                                               (double *) arg1.dat_d,              
                                               (double *) arg2.dat_d,              
                                               (double *) arg3.dat_d,              
                                               (double *) arg4.dat_d,              
                                               offset_s,                          
                                               set.size );                        
                                                                                  
  cutilSafeCall(cudaThreadSynchronize());                                         
  cutilCheckMsg("op_cuda_update execution failed\n");                             
                                                                                  
  // transfer global reduction data back to CPU                                   
                                                                                  
  mvReductArraysToHost(reduct_bytes);                                             
                                                                                  
  for (int b=0; b<maxblocks; b++)                                                 
    for (int d=0; d<1; d++)                                                       
      arg3h[d] = arg3h[d] + ((double *)arg3.dat)[d+b*1];                           
  for (int b=0; b<maxblocks; b++)                                                 
    for (int d=0; d<1; d++)                                                       
      arg4h[d] = MAX(arg4h[d],((double *)arg4.dat)[d+b*1]);                        
                                                                                  
  // update kernel record                                                         
                                                                                  
  timers(&cpu_t2, &wall_t2);                                                      
  OP_kernels[1].name      = name;                                                 
  OP_kernels[1].count    += 1;                                                    
  OP_kernels[1].time     += wall_t2 - wall_t1;                                    
  OP_kernels[1].transfer += (double)set.size * arg0.size;                          
  OP_kernels[1].transfer += (double)set.size * arg1.size * 2.0f;                   
  OP_kernels[1].transfer += (double)set.size * arg2.size * 2.0f;                   
}                                                                                 
                                                                                  
