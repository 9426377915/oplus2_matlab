#
# set paths for header files and libraries
#

OP2		:= ../common
CUDA		:= $(CUDA_INSTALL_PATH)
INC		:= -I$(CUDA)/include -I$(OP2) -I.
LIB		:= -L$(CUDA)/lib64
MPI_HOME	:= /home/gihan/openmpi

CC		:= $(MPI_HOME)/bin/mpicc 
CXX		:= $(MPI_HOME)/bin/mpiCC

#
# ParMetis for partitioning
#
PARMETIS_HOME	:= /home/gihan/ParMetis-3.1.1
PARMETISLIB 	:= $(PARMETIS_HOME)/libparmetis.a $(PARMETIS_HOME)/libmetis.a

#
# set flags for compilation and linking
#

# -Xptxas -dlcm=ca   => use L1 cache
# -Xptxas -dlcm=cg   => no L1 cache

#CCFLAGS	:= -g -fPIC -DUNIX -Wall -Wextra
#NVCCFLAGS	:= -g -G -arch=sm_20 -Xptxas=-v -use_fast_math

CCFLAGS		:= -O2 -vec-report -xSSE2,SSE3,SSE4.1,SSE4.2 -g #-DCOMM_PERF #-DDEBUG


#NVCCFLAGS	:= -O3 -maxrregcount 48 -arch=sm_20 \
#		   -Xptxas -dlcm=cg -Xptxas=-v -use_fast_math
NVCCFLAGS	:= -O3 -arch=sm_20 \
		   -Xptxas -dlcm=ca -Xptxas=-v -use_fast_math
LIBS		:= $(LIB) -lcudart 
OMP		:= -openmp -openmp-report2
OP2_H		:= $(OP2)/op_seq.h $(OP2)/op_mpi_seq.h $(OP2)/op_lib.h \
			$(OP2)/op_lib_core.h $(OP2)/op_mpi_core.h 
OP2_LIB		:= $(OP2)/op_lib.a $(PARMETISLIB)






#
# master to make all versions
#

all:		$(OP2_LIB) airfoil_seq airfoil_op airfoil_cuda airfoil_mpi

#
# OP2 library
#

$(OP2_LIB):	$(OP2_H) $(OP2)/op_lib_core.c $(OP2)/op_mpi_core.c $(OP2)/op_mpi_part_core.c $(OP2)/op_lib.cpp 
		cd $(OP2); make

#
# simple sequential version
#

airfoil_seq:	airfoil.cpp save_soln.h adt_calc.h res_calc.h bres_calc.h \
		Makefile $(OP2_H) $(OP2_LIB)
		$(CXX) $(CCFLAGS) $(INC) -o airfoil_seq airfoil.cpp $(OP2_LIB) 
		

#
# simple sequential version with mpi
#


airfoil_mpi:	airfoil_mpi.cpp save_soln.h adt_calc.h res_calc.h bres_calc.h \
		Makefile $(OP2_H) $(OP2_LIB)
		$(CXX) $(CCFLAGS) $(INC) -o airfoil_mpi airfoil_mpi.cpp $(OP2_LIB) 	
		

#
# x86 version using kernel files generated by op2.m
#

airfoil_op:	airfoil_op.cpp airfoil_kernels.cpp \
		save_soln_kernel.cpp  save_soln.h \
		adt_calc_kernel.cpp   adt_calc.h  \
		res_calc_kernel.cpp   res_calc.h  \
		bres_calc_kernel.cpp  bres_calc.h \
		update_kernel.cpp     update.h    \
                Makefile $(OP2_H) $(OP2_LIB)
		$(CXX) $(CCFLAGS) $(INC) $(OMP) -o airfoil_op airfoil_op.cpp \
		                     airfoil_kernels.cpp $(OP2_LIB)

#
# CUDA version using kernel files generated by op2.m
#

airfoil_cuda:	airfoil_op.cpp airfoil_kernels_cu.o Makefile $(OP2_LIB)
		$(CXX) $(CCFLAGS) $(INC) -fPIC -o airfoil_cuda airfoil_op.cpp \
		                    airfoil_kernels_cu.o $(OP2_LIB) $(LIBS)

airfoil_kernels_cu.o:	airfoil_kernels.cu      \
		save_soln_kernel.cu save_soln.h \
		adt_calc_kernel.cu  adt_calc.h  \
		res_calc_kernel.cu  res_calc.h  \
		bres_calc_kernel.cu bres_calc.h \
		update_kernel.cu    update.h    \
                Makefile $(OP2_H)
		nvcc $(INC) $(NVCCFLAGS) -c -o airfoil_kernels_cu.o \
				               airfoil_kernels.cu
#
# cleanup
#

clean:
		rm -f airfoil_seq airfoil_op airfoil_cuda airfoil_mpi *.o
		cd $(OP2); make clean
