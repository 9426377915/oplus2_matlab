// 
// auto-generated by op_seq_gen.m on 21-Apr-2011 11:55:49 
//

//                                                                                       
// header                                                                                
//                                                                                       
                                                                                         
#include "op_lib.h"                                                                      
                                                                                         
//                                                                                       
// templates                                                                             
//                                                                                       
                                                                                         
template < class T, class D >                                                            
void arg_check(op_set set, int m, const char *name, D *arg, int idx, op_map map,         
               int dim, const char *typ, op_access acc, T **p_arg, int *ninds){          
  if (idx != -1) {                                                                       
    printf("error: arg %d in kernel \"%s\"\n",m,name);                                   
    printf("invalid index, should be -1 for constant arg\n");                            
    exit(1);                                                                             
  }                                                                                      
  if (type_error(arg,typ)) {                                                             
    printf("error: arg %d in kernel \"%s\"\n",m,name);                                   
    printf("data type does not match type of input dataset\n");                          
    exit(1);                                                                             
  }                                                                                      
  if (type_error(*p_arg,typ)) {                                                          
    printf("error: arg %d in kernel \"%s\"\n",m,name);                                   
    printf("data type does not match type of function argument\n");                      
    exit(1);                                                                             
  }                                                                                      
  if (dim <= 0) {                                                                        
    printf("error: arg %d in kernel \"%s\"\n",m,name);                                   
    printf("dimension must be strictly positive\n");                                     
    exit(1);                                                                             
  }                                                                                      
}                                                                                        
                                                                                         
template < class T >                                                                     
void arg_check(op_set set, int m, const char *name, op_dat arg, int idx, op_map map,     
               int dim, const char *typ, op_access acc, T **p_arg, int *ninds){          
  if (idx>=0) (*ninds)++;                                                                
                                                                                         
  if (map == NULL) {                                                                     
    if (idx != -1) {                                                                     
      printf("error: arg %d in kernel \"%s\"\n",m,name);                                 
      printf("invalid index, should be -1 for identity mapping\n");                      
      exit(1);                                                                           
    }                                                                                    
  }                                                                                      
  else {                                                                                 
    if (set != map->from || arg->set != map->to) {                                       
      printf("error: arg %d in kernel \"%s\"\n",m,name);                                 
      printf("invalid pointer\n");                                                       
      exit(1);                                                                           
    }                                                                                    
    if (idx < 0 || idx >= map->dim) {                                                    
      printf("error: arg %d in kernel \"%s\"\n",m,name);                                 
      printf("invalid pointer index\n");                                                 
      exit(1);                                                                           
    }                                                                                    
  }                                                                                      
  if (strcmp(arg->type,typ)) {                                                           
    printf("error: arg %d in kernel \"%s\"\n",m,name);                                   
    printf("data type does not match type of input dataset\n");                          
    exit(1);                                                                             
  }                                                                                      
  if (type_error(*p_arg,typ)) {                                                          
    printf("error: arg %d in kernel \"%s\"\n",m,name);                                   
    printf("data type does not match type of function argument\n");                      
    exit(1);                                                                             
  }                                                                                      
  if (arg->dim != dim) {                                                                 
    printf("error: arg %d in kernel \"%s\"\n",m,name);                                   
    printf("dimension does not match input dataset\n");                                  
    exit(1);                                                                             
  }                                                                                      
}                                                                                        
                                                                                         
template < class T, class D >                                                            
void arg_set(int n,D *arg,int idx,op_map map,int dim,                                    
             const char *typ,op_access acc,T **p_arg){                                   
  *p_arg = (T *) arg;                                                                    
}                                                                                        
                                                                                         
template < class T >                                                                     
void arg_set(int n,op_dat arg,int idx,op_map map,int dim,                                
             const char *typ,op_access acc,T **p_arg){                                   
  int n2;                                                                                
  if (map==NULL)                    // identity mapping                                  
    n2 = n;                                                                              
  else                              // standard pointers                                 
    n2 = map->map[idx+n*map->dim];                                                       
                                                                                         
  *p_arg = (T *)((char *)arg->dat + n2*arg->size);                                               
}                                                                                        
                                                                                         
                                                                                         
//                                                                                       
// op_par_loop routine for 1 arguments                                                   
//                                                                                       
                                                                                         
template < class T0,                                                                     
           class D0 >                                                                    
void op_par_loop(void (*kernel)( T0* ),                                                  
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ){         
                                                                                         
  char *p_arg0;                                                                          
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0 );                                                              
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 2 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1,                                                           
           class D0, class D1 >                                                          
void op_par_loop(void (*kernel)( T0*, T1* ),                                             
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ){         
                                                                                         
  char *p_arg0, *p_arg1;                                                                 
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1 );                                               
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 3 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2,                                                 
           class D0, class D1, class D2 >                                                
void op_par_loop(void (*kernel)( T0*, T1*, T2* ),                                        
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2;                                                        
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2 );                                
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 4 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3,                                       
           class D0, class D1, class D2, class D3 >                                      
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3* ),                                   
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3;                                               
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3 );                 
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 5 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class D0, class D1, class D2, class D3, class D4 >                            
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4* ),                              
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4;                                      
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4 );  
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 6 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5,                                                                     
           class D0, class D1, class D2, class D3, class D4,                             
           class D5 >                                                                    
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5* ),                                               
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5;                                                                          
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5 );                                                              
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 7 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6,                                                           
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6 >                                                          
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6* ),                                          
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6;                                                                 
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6 );                                               
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 8 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7,                                                 
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7 >                                                
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7* ),                                     
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7;                                                        
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7 );                                
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 9 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8,                                       
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8 >                                      
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8* ),                                
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8;                                               
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8 );                 
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 10 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9 >                            
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9* ),                           
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9;                                      
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9 );  
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 11 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,                                                                    
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10 >                                                                   
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10* ),                                              
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10;                                                                         
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10 );                                                            
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 12 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,                                                          
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10,class D11 >                                                         
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11* ),                                         
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10,          
  D11 arg11,int idx11,op_map map11,int dim11,const char *typ11,op_access acc11){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10,*p_arg11;                                                                
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
    arg_check(set,11,name,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
    arg_set(n,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10,(T11 *)p_arg11 );                                             
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 13 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,                                                
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10,class D11,class D12 >                                               
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12* ),                                    
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10,          
  D11 arg11,int idx11,op_map map11,int dim11,const char *typ11,op_access acc11,          
  D12 arg12,int idx12,op_map map12,int dim12,const char *typ12,op_access acc12){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10,*p_arg11,*p_arg12;                                                       
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
    arg_check(set,11,name,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11,&ninds);  
    arg_check(set,12,name,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
    arg_set(n,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11);                     
    arg_set(n,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10,(T11 *)p_arg11,(T12 *)p_arg12 );                              
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 14 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,                                      
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10,class D11,class D12,class D13 >                                     
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13* ),                               
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10,          
  D11 arg11,int idx11,op_map map11,int dim11,const char *typ11,op_access acc11,          
  D12 arg12,int idx12,op_map map12,int dim12,const char *typ12,op_access acc12,          
  D13 arg13,int idx13,op_map map13,int dim13,const char *typ13,op_access acc13){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10,*p_arg11,*p_arg12,*p_arg13;                                              
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
    arg_check(set,11,name,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11,&ninds);  
    arg_check(set,12,name,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12,&ninds);  
    arg_check(set,13,name,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
    arg_set(n,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11);                     
    arg_set(n,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12);                     
    arg_set(n,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10,(T11 *)p_arg11,(T12 *)p_arg12,(T13 *)p_arg13 );               
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 15 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10,class D11,class D12,class D13,class D14 >                           
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14* ),                          
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10,          
  D11 arg11,int idx11,op_map map11,int dim11,const char *typ11,op_access acc11,          
  D12 arg12,int idx12,op_map map12,int dim12,const char *typ12,op_access acc12,          
  D13 arg13,int idx13,op_map map13,int dim13,const char *typ13,op_access acc13,          
  D14 arg14,int idx14,op_map map14,int dim14,const char *typ14,op_access acc14){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10,*p_arg11,*p_arg12,*p_arg13,*p_arg14;                                     
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
    arg_check(set,11,name,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11,&ninds);  
    arg_check(set,12,name,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12,&ninds);  
    arg_check(set,13,name,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13,&ninds);  
    arg_check(set,14,name,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
    arg_set(n,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11);                     
    arg_set(n,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12);                     
    arg_set(n,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13);                     
    arg_set(n,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10,(T11 *)p_arg11,(T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14 );
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 16 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15,                                                                    
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10,class D11,class D12,class D13,class D14,                            
           class D15 >                                                                   
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15* ),                                              
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10,          
  D11 arg11,int idx11,op_map map11,int dim11,const char *typ11,op_access acc11,          
  D12 arg12,int idx12,op_map map12,int dim12,const char *typ12,op_access acc12,          
  D13 arg13,int idx13,op_map map13,int dim13,const char *typ13,op_access acc13,          
  D14 arg14,int idx14,op_map map14,int dim14,const char *typ14,op_access acc14,          
  D15 arg15,int idx15,op_map map15,int dim15,const char *typ15,op_access acc15){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10,*p_arg11,*p_arg12,*p_arg13,*p_arg14,                                     
       *p_arg15;                                                                         
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
    arg_check(set,11,name,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11,&ninds);  
    arg_check(set,12,name,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12,&ninds);  
    arg_check(set,13,name,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13,&ninds);  
    arg_check(set,14,name,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14,&ninds);  
    arg_check(set,15,name,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
    arg_set(n,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11);                     
    arg_set(n,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12);                     
    arg_set(n,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13);                     
    arg_set(n,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14);                     
    arg_set(n,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10,(T11 *)p_arg11,(T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,  
            (T15 *)p_arg15 );                                                            
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 17 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15,class T16,                                                          
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10,class D11,class D12,class D13,class D14,                            
           class D15,class D16 >                                                         
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15*,T16* ),                                         
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10,          
  D11 arg11,int idx11,op_map map11,int dim11,const char *typ11,op_access acc11,          
  D12 arg12,int idx12,op_map map12,int dim12,const char *typ12,op_access acc12,          
  D13 arg13,int idx13,op_map map13,int dim13,const char *typ13,op_access acc13,          
  D14 arg14,int idx14,op_map map14,int dim14,const char *typ14,op_access acc14,          
  D15 arg15,int idx15,op_map map15,int dim15,const char *typ15,op_access acc15,          
  D16 arg16,int idx16,op_map map16,int dim16,const char *typ16,op_access acc16){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10,*p_arg11,*p_arg12,*p_arg13,*p_arg14,                                     
       *p_arg15,*p_arg16;                                                                
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
    arg_check(set,11,name,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11,&ninds);  
    arg_check(set,12,name,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12,&ninds);  
    arg_check(set,13,name,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13,&ninds);  
    arg_check(set,14,name,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14,&ninds);  
    arg_check(set,15,name,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15,&ninds);  
    arg_check(set,16,name,arg16,idx16,map16,dim16,typ16,acc16,(T16 **)&p_arg16,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
    arg_set(n,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11);                     
    arg_set(n,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12);                     
    arg_set(n,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13);                     
    arg_set(n,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14);                     
    arg_set(n,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15);                     
    arg_set(n,arg16,idx16,map16,dim16,typ16,acc16,(T16 **)&p_arg16);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10,(T11 *)p_arg11,(T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,  
            (T15 *)p_arg15,(T16 *)p_arg16 );                                             
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 18 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15,class T16,class T17,                                                
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10,class D11,class D12,class D13,class D14,                            
           class D15,class D16,class D17 >                                               
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15*,T16*,T17* ),                                    
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10,          
  D11 arg11,int idx11,op_map map11,int dim11,const char *typ11,op_access acc11,          
  D12 arg12,int idx12,op_map map12,int dim12,const char *typ12,op_access acc12,          
  D13 arg13,int idx13,op_map map13,int dim13,const char *typ13,op_access acc13,          
  D14 arg14,int idx14,op_map map14,int dim14,const char *typ14,op_access acc14,          
  D15 arg15,int idx15,op_map map15,int dim15,const char *typ15,op_access acc15,          
  D16 arg16,int idx16,op_map map16,int dim16,const char *typ16,op_access acc16,          
  D17 arg17,int idx17,op_map map17,int dim17,const char *typ17,op_access acc17){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10,*p_arg11,*p_arg12,*p_arg13,*p_arg14,                                     
       *p_arg15,*p_arg16,*p_arg17;                                                       
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
    arg_check(set,11,name,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11,&ninds);  
    arg_check(set,12,name,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12,&ninds);  
    arg_check(set,13,name,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13,&ninds);  
    arg_check(set,14,name,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14,&ninds);  
    arg_check(set,15,name,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15,&ninds);  
    arg_check(set,16,name,arg16,idx16,map16,dim16,typ16,acc16,(T16 **)&p_arg16,&ninds);  
    arg_check(set,17,name,arg17,idx17,map17,dim17,typ17,acc17,(T17 **)&p_arg17,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
    arg_set(n,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11);                     
    arg_set(n,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12);                     
    arg_set(n,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13);                     
    arg_set(n,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14);                     
    arg_set(n,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15);                     
    arg_set(n,arg16,idx16,map16,dim16,typ16,acc16,(T16 **)&p_arg16);                     
    arg_set(n,arg17,idx17,map17,dim17,typ17,acc17,(T17 **)&p_arg17);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10,(T11 *)p_arg11,(T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,  
            (T15 *)p_arg15,(T16 *)p_arg16,(T17 *)p_arg17 );                              
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 19 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15,class T16,class T17,class T18,                                      
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10,class D11,class D12,class D13,class D14,                            
           class D15,class D16,class D17,class D18 >                                     
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15*,T16*,T17*,T18* ),                               
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10,          
  D11 arg11,int idx11,op_map map11,int dim11,const char *typ11,op_access acc11,          
  D12 arg12,int idx12,op_map map12,int dim12,const char *typ12,op_access acc12,          
  D13 arg13,int idx13,op_map map13,int dim13,const char *typ13,op_access acc13,          
  D14 arg14,int idx14,op_map map14,int dim14,const char *typ14,op_access acc14,          
  D15 arg15,int idx15,op_map map15,int dim15,const char *typ15,op_access acc15,          
  D16 arg16,int idx16,op_map map16,int dim16,const char *typ16,op_access acc16,          
  D17 arg17,int idx17,op_map map17,int dim17,const char *typ17,op_access acc17,          
  D18 arg18,int idx18,op_map map18,int dim18,const char *typ18,op_access acc18){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10,*p_arg11,*p_arg12,*p_arg13,*p_arg14,                                     
       *p_arg15,*p_arg16,*p_arg17,*p_arg18;                                              
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
    arg_check(set,11,name,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11,&ninds);  
    arg_check(set,12,name,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12,&ninds);  
    arg_check(set,13,name,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13,&ninds);  
    arg_check(set,14,name,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14,&ninds);  
    arg_check(set,15,name,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15,&ninds);  
    arg_check(set,16,name,arg16,idx16,map16,dim16,typ16,acc16,(T16 **)&p_arg16,&ninds);  
    arg_check(set,17,name,arg17,idx17,map17,dim17,typ17,acc17,(T17 **)&p_arg17,&ninds);  
    arg_check(set,18,name,arg18,idx18,map18,dim18,typ18,acc18,(T18 **)&p_arg18,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
    arg_set(n,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11);                     
    arg_set(n,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12);                     
    arg_set(n,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13);                     
    arg_set(n,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14);                     
    arg_set(n,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15);                     
    arg_set(n,arg16,idx16,map16,dim16,typ16,acc16,(T16 **)&p_arg16);                     
    arg_set(n,arg17,idx17,map17,dim17,typ17,acc17,(T17 **)&p_arg17);                     
    arg_set(n,arg18,idx18,map18,dim18,typ18,acc18,(T18 **)&p_arg18);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10,(T11 *)p_arg11,(T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,  
            (T15 *)p_arg15,(T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18 );               
  }                                                                                      
}                                                                                        
                                                                                         
//                                                                                       
// op_par_loop routine for 20 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15,class T16,class T17,class T18,class T19,                            
           class D0, class D1, class D2, class D3, class D4,                             
           class D5, class D6, class D7, class D8, class D9,                             
           class D10,class D11,class D12,class D13,class D14,                            
           class D15,class D16,class D17,class D18,class D19 >                           
void op_par_loop(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                                
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15*,T16*,T17*,T18*,T19* ),                          
  char const * name, op_set set,                                                         
  D0  arg0 ,int idx0 ,op_map map0 ,int dim0 ,const char *typ0 ,op_access acc0 ,          
  D1  arg1 ,int idx1 ,op_map map1 ,int dim1 ,const char *typ1 ,op_access acc1 ,          
  D2  arg2 ,int idx2 ,op_map map2 ,int dim2 ,const char *typ2 ,op_access acc2 ,          
  D3  arg3 ,int idx3 ,op_map map3 ,int dim3 ,const char *typ3 ,op_access acc3 ,          
  D4  arg4 ,int idx4 ,op_map map4 ,int dim4 ,const char *typ4 ,op_access acc4 ,          
  D5  arg5 ,int idx5 ,op_map map5 ,int dim5 ,const char *typ5 ,op_access acc5 ,          
  D6  arg6 ,int idx6 ,op_map map6 ,int dim6 ,const char *typ6 ,op_access acc6 ,          
  D7  arg7 ,int idx7 ,op_map map7 ,int dim7 ,const char *typ7 ,op_access acc7 ,          
  D8  arg8 ,int idx8 ,op_map map8 ,int dim8 ,const char *typ8 ,op_access acc8 ,          
  D9  arg9 ,int idx9 ,op_map map9 ,int dim9 ,const char *typ9 ,op_access acc9 ,          
  D10 arg10,int idx10,op_map map10,int dim10,const char *typ10,op_access acc10,          
  D11 arg11,int idx11,op_map map11,int dim11,const char *typ11,op_access acc11,          
  D12 arg12,int idx12,op_map map12,int dim12,const char *typ12,op_access acc12,          
  D13 arg13,int idx13,op_map map13,int dim13,const char *typ13,op_access acc13,          
  D14 arg14,int idx14,op_map map14,int dim14,const char *typ14,op_access acc14,          
  D15 arg15,int idx15,op_map map15,int dim15,const char *typ15,op_access acc15,          
  D16 arg16,int idx16,op_map map16,int dim16,const char *typ16,op_access acc16,          
  D17 arg17,int idx17,op_map map17,int dim17,const char *typ17,op_access acc17,          
  D18 arg18,int idx18,op_map map18,int dim18,const char *typ18,op_access acc18,          
  D19 arg19,int idx19,op_map map19,int dim19,const char *typ19,op_access acc19){         
                                                                                         
  char *p_arg0, *p_arg1, *p_arg2, *p_arg3, *p_arg4,                                      
       *p_arg5, *p_arg6, *p_arg7, *p_arg8, *p_arg9,                                      
       *p_arg10,*p_arg11,*p_arg12,*p_arg13,*p_arg14,                                     
       *p_arg15,*p_arg16,*p_arg17,*p_arg18,*p_arg19;                                     
                                                                                         
  int ninds=0;                                                                           
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_diags>0) {                                                                      
    arg_check(set,0 ,name,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 ,&ninds);  
    arg_check(set,1 ,name,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 ,&ninds);  
    arg_check(set,2 ,name,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 ,&ninds);  
    arg_check(set,3 ,name,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 ,&ninds);  
    arg_check(set,4 ,name,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 ,&ninds);  
    arg_check(set,5 ,name,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 ,&ninds);  
    arg_check(set,6 ,name,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 ,&ninds);  
    arg_check(set,7 ,name,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 ,&ninds);  
    arg_check(set,8 ,name,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 ,&ninds);  
    arg_check(set,9 ,name,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 ,&ninds);  
    arg_check(set,10,name,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10,&ninds);  
    arg_check(set,11,name,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11,&ninds);  
    arg_check(set,12,name,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12,&ninds);  
    arg_check(set,13,name,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13,&ninds);  
    arg_check(set,14,name,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14,&ninds);  
    arg_check(set,15,name,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15,&ninds);  
    arg_check(set,16,name,arg16,idx16,map16,dim16,typ16,acc16,(T16 **)&p_arg16,&ninds);  
    arg_check(set,17,name,arg17,idx17,map17,dim17,typ17,acc17,(T17 **)&p_arg17,&ninds);  
    arg_check(set,18,name,arg18,idx18,map18,dim18,typ18,acc18,(T18 **)&p_arg18,&ninds);  
    arg_check(set,19,name,arg19,idx19,map19,dim19,typ19,acc19,(T19 **)&p_arg19,&ninds);  
  }                                                                                      
                                                                                         
  if (OP_diags>2) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set->size; n++) {                                                      
    arg_set(n,arg0 ,idx0 ,map0 ,dim0 ,typ0 ,acc0 ,(T0  **)&p_arg0 );                     
    arg_set(n,arg1 ,idx1 ,map1 ,dim1 ,typ1 ,acc1 ,(T1  **)&p_arg1 );                     
    arg_set(n,arg2 ,idx2 ,map2 ,dim2 ,typ2 ,acc2 ,(T2  **)&p_arg2 );                     
    arg_set(n,arg3 ,idx3 ,map3 ,dim3 ,typ3 ,acc3 ,(T3  **)&p_arg3 );                     
    arg_set(n,arg4 ,idx4 ,map4 ,dim4 ,typ4 ,acc4 ,(T4  **)&p_arg4 );                     
    arg_set(n,arg5 ,idx5 ,map5 ,dim5 ,typ5 ,acc5 ,(T5  **)&p_arg5 );                     
    arg_set(n,arg6 ,idx6 ,map6 ,dim6 ,typ6 ,acc6 ,(T6  **)&p_arg6 );                     
    arg_set(n,arg7 ,idx7 ,map7 ,dim7 ,typ7 ,acc7 ,(T7  **)&p_arg7 );                     
    arg_set(n,arg8 ,idx8 ,map8 ,dim8 ,typ8 ,acc8 ,(T8  **)&p_arg8 );                     
    arg_set(n,arg9 ,idx9 ,map9 ,dim9 ,typ9 ,acc9 ,(T9  **)&p_arg9 );                     
    arg_set(n,arg10,idx10,map10,dim10,typ10,acc10,(T10 **)&p_arg10);                     
    arg_set(n,arg11,idx11,map11,dim11,typ11,acc11,(T11 **)&p_arg11);                     
    arg_set(n,arg12,idx12,map12,dim12,typ12,acc12,(T12 **)&p_arg12);                     
    arg_set(n,arg13,idx13,map13,dim13,typ13,acc13,(T13 **)&p_arg13);                     
    arg_set(n,arg14,idx14,map14,dim14,typ14,acc14,(T14 **)&p_arg14);                     
    arg_set(n,arg15,idx15,map15,dim15,typ15,acc15,(T15 **)&p_arg15);                     
    arg_set(n,arg16,idx16,map16,dim16,typ16,acc16,(T16 **)&p_arg16);                     
    arg_set(n,arg17,idx17,map17,dim17,typ17,acc17,(T17 **)&p_arg17);                     
    arg_set(n,arg18,idx18,map18,dim18,typ18,acc18,(T18 **)&p_arg18);                     
    arg_set(n,arg19,idx19,map19,dim19,typ19,acc19,(T19 **)&p_arg19);                     
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0 *)p_arg0,  (T1 *)p_arg1,  (T2 *)p_arg2,  (T3 *)p_arg3,  (T4 *)p_arg4,    
            (T5 *)p_arg5,  (T6 *)p_arg6,  (T7 *)p_arg7,  (T8 *)p_arg8,  (T9 *)p_arg9,    
            (T10 *)p_arg10,(T11 *)p_arg11,(T12 *)p_arg12,(T13 *)p_arg13,(T14 *)p_arg14,  
            (T15 *)p_arg15,(T16 *)p_arg16,(T17 *)p_arg17,(T18 *)p_arg18,(T19 *)p_arg19 );
  }                                                                                      
}                                                                                        
