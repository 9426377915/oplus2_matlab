// 
// auto-generated by op2.m on 05-Jan-2010 
//

// header files                                                            
                                                                           
#include <stdlib.h>                                                        
#include <stdio.h>                                                         
#include <string.h>                                                        
#include <math.h>                                                          
#include <cutil_inline.h>                                                  
#include "op_datatypes.h"                                                  
                                                                           
                                                                           
extern "C"                                                                 
op_plan * plan(char const *, op_set, int, op_dat *, int *,                 
  op_ptr *, int *, op_datatype *, op_access *, int, int *);                
                                                                           
                                                                           
// user function                                                           
                                                                           
__device__                                                                 
#include "update.h"                                                        
                                                                           
                                                                           
// CUDA kernel function                                                    
                                                                           
__global__ void op_cuda_update(                                            
                   float  *arg0,                                           
                   float  *arg1,                                           
                   float  *arg2,                                           
                   int set_size) {                                         
                                                                           
  float  arg0_l[1];                                                        
  float  arg1_l[1];                                                        
  float  arg2_l[1];                                                        
                                                                           
  // process set elements                                                  
                                                                           
  for (int n=threadIdx.x+blockIdx.x*blockDim.x;                            
       n<set_size; n+=blockDim.x*gridDim.x) {                              
                                                                           
    // initialise local variables                                          
                                                                           
    for (int d=0; d<1; d++)                                                
      arg0_l[d] = arg0[d+n*1];                                             
    for (int d=0; d<1; d++)                                                
      arg1_l[d] = arg1[d+n*1];                                             
    for (int d=0; d<1; d++)                                                
      arg2_l[d] = 0;                                                       
                                                                           
    // user-supplied kernel call                                           
                                                                           
    update(arg0_l,arg1_l,arg2_l);                                          
                                                                           
    // store local variables                                               
                                                                           
    for (int d=0; d<1; d++)                                                
      arg1[d+n*1]  = arg1_l[d];                                            
    for (int d=0; d<1; d++)                                                
      arg2[d+n*1] += arg2_l[d];                                            
  }                                                                        
}                                                                          
                                                                           
                                                                           
// host stub function                                                      
                                                                           
extern "C"                                                                 
void op_par_loop_update(char const * name, op_set set,                     
  op_dat arg0, int arg0idx, op_ptr arg0ptr, int arg0dim,                   
       op_datatype arg0typ,           op_access arg0acc,                   
  op_dat arg1, int arg1idx, op_ptr arg1ptr, int arg1dim,                   
       op_datatype arg1typ,           op_access arg1acc,                   
  op_dat arg2, int arg2idx, op_ptr arg2ptr, int arg2dim,                   
       op_datatype arg2typ,           op_access arg2acc){                  
                                                                           
  if (OP_DIAGS>1) {                                                        
    printf(" kernel routine w/o indirection:  update \n");                 
  }                                                                        
                                                                           
  // execute plan                                                          
                                                                           
  op_cuda_update<<<100,64>>>(arg0.fdat_d,arg1.fdat_d,arg2.fdat_d,set.size);
                                                                           
  cutilSafeCall(cudaThreadSynchronize());                                  
  cutilCheckMsg("op_cuda_update execution failed\n");                      
}                                                                          
