// 
// auto-generated by op_seq_gen.m on 12-Feb-2010 12:30:22 
//

//                                                                                       
// headers                                                                               
//                                                                                       
                                                                                         
#include <stdlib.h>                                                                      
#include <stdio.h>                                                                       
#include <string.h>                                                                      
#include <math.h>                                                                        
#include "op_datatypes.h"                                                                
                                                                                         
                                                                                         
//                                                                                       
// op routine declarations                                                               
//                                                                                       
                                                                                         
void op_init(int, char **);                                                              
                                                                                         
void op_decl_set(int, op_set &, char const *);                                           
                                                                                         
void op_decl_ptr(op_set, op_set, int, int *, op_ptr &, char const *);                    
                                                                                         
void op_decl_ddat(op_set, int, op_datatype, double *, op_dat &, char const *);           
                                                                                         
void op_decl_fdat(op_set, int, op_datatype, float *, op_dat &, char const *);            
                                                                                         
void op_decl_idat(op_set, int, op_datatype, int *, op_dat &, char const *);              
                                                                                         
void op_decl_dat(op_set s,int d,op_datatype t,double *da,op_dat &dt,char const *nm){     
    op_decl_ddat(       s,    d,            t,        da,        dt,            nm);     
}                                                                                        
                                                                                         
void op_decl_dat(op_set s,int d,op_datatype t,float *da,op_dat &dt,char const *nm){      
    op_decl_fdat(       s,    d,            t,       da,        dt,            nm);      
 }                                                                                       
                                                                                         
void op_decl_dat(op_set s,int d,op_datatype t,int *da,op_dat &dt,char const *nm){        
    op_decl_idat(       s,    d,            t,     da,        dt,            nm);        
}                                                                                        
                                                                                         
void op_decl_dconst(int, op_datatype, double *, char const *);                           
                                                                                         
void op_decl_fconst(int, op_datatype, float *, char const *);                            
                                                                                         
void op_decl_iconst(int, op_datatype, int *, char const *);                              
                                                                                         
void op_decl_const(int d,op_datatype t,double *da,char const *nm){                       
    op_decl_dconst(    d,            t,        da,            nm);                       
}                                                                                        
                                                                                         
void op_decl_const(int d,op_datatype t,float *da,char const *nm){                        
    op_decl_fconst(    d,            t,       da,            nm);                        
 }                                                                                       
                                                                                         
void op_decl_const(int d,op_datatype t,int *da,char const *nm){                          
    op_decl_iconst(    d,            t,     da,            nm);                          
}                                                                                        
                                                                                         
void op_fetch_data(op_dat);                                                              
                                                                                         
void op_diagnostic_output();                                                             
                                                                                         
                                                                                         
//                                                                                       
// op_par_loop routine for 1 arguments                                                   
//                                                                                       
                                                                                         
template < class T0 >                                                                    
void op_par_loop_1(void (*kernel)( T0* ),                                                
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0){       
                                                                                         
  int           nargs = 1;                                                               
                                                                                         
  int              idxs[1] = { idx0 };                                                   
  int              dims[1] = { dim0 };                                                   
  op_datatype      typs[1] = { typ0 };                                                   
  op_access        accs[1] = { acc0 };                                                   
  int         *ptr_ptrs[1] = { ptr0.ptr };                                               
  int          ptr_dims[1] = { ptr0.dim };                                               
  float         *f_dats[1] = { arg0.fdat };                                              
  double        *d_dats[1] = { arg0.ddat };                                              
  int           *i_dats[1] = { arg0.idat };                                              
  int          ptr_from[1] = { ptr0.from.index };                                        
  int            ptr_to[1] = { ptr0.to.index };                                          
  int          arg_sets[1] = { arg0.set.index };                                         
  int          arg_dims[1] = { arg0.dim };                                               
  op_datatype arg_types[1] = { arg0.type };                                              
  float         *f_args[1];                                                              
  double        *d_args[1];                                                              
  int           *i_args[1];                                                              
  void            *args[1];                                                              
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0] );                                                              
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 2 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1 >                                                          
void op_par_loop_2(void (*kernel)( T0*, T1* ),                                           
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1){       
                                                                                         
  int           nargs = 2;                                                               
                                                                                         
  int              idxs[2] = { idx0, idx1 };                                             
  int              dims[2] = { dim0, dim1 };                                             
  op_datatype      typs[2] = { typ0, typ1 };                                             
  op_access        accs[2] = { acc0, acc1 };                                             
  int         *ptr_ptrs[2] = { ptr0.ptr, ptr1.ptr };                                     
  int          ptr_dims[2] = { ptr0.dim, ptr1.dim };                                     
  float         *f_dats[2] = { arg0.fdat, arg1.fdat };                                   
  double        *d_dats[2] = { arg0.ddat, arg1.ddat };                                   
  int           *i_dats[2] = { arg0.idat, arg1.idat };                                   
  int          ptr_from[2] = { ptr0.from.index, ptr1.from.index };                       
  int            ptr_to[2] = { ptr0.to.index, ptr1.to.index };                           
  int          arg_sets[2] = { arg0.set.index, arg1.set.index };                         
  int          arg_dims[2] = { arg0.dim, arg1.dim };                                     
  op_datatype arg_types[2] = { arg0.type, arg1.type };                                   
  float         *f_args[2];                                                              
  double        *d_args[2];                                                              
  int           *i_args[2];                                                              
  void            *args[2];                                                              
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1] );                                               
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 3 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2 >                                                
void op_par_loop_3(void (*kernel)( T0*, T1*, T2* ),                                      
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2){       
                                                                                         
  int           nargs = 3;                                                               
                                                                                         
  int              idxs[3] = { idx0, idx1, idx2 };                                       
  int              dims[3] = { dim0, dim1, dim2 };                                       
  op_datatype      typs[3] = { typ0, typ1, typ2 };                                       
  op_access        accs[3] = { acc0, acc1, acc2 };                                       
  int         *ptr_ptrs[3] = { ptr0.ptr, ptr1.ptr, ptr2.ptr };                           
  int          ptr_dims[3] = { ptr0.dim, ptr1.dim, ptr2.dim };                           
  float         *f_dats[3] = { arg0.fdat, arg1.fdat, arg2.fdat };                        
  double        *d_dats[3] = { arg0.ddat, arg1.ddat, arg2.ddat };                        
  int           *i_dats[3] = { arg0.idat, arg1.idat, arg2.idat };                        
  int          ptr_from[3] = { ptr0.from.index, ptr1.from.index, ptr2.from.index };      
  int            ptr_to[3] = { ptr0.to.index, ptr1.to.index, ptr2.to.index };            
  int          arg_sets[3] = { arg0.set.index, arg1.set.index, arg2.set.index };         
  int          arg_dims[3] = { arg0.dim, arg1.dim, arg2.dim };                           
  op_datatype arg_types[3] = { arg0.type, arg1.type, arg2.type };                        
  float         *f_args[3];                                                              
  double        *d_args[3];                                                              
  int           *i_args[3];                                                              
  void            *args[3];                                                              
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2] );                                
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 4 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3 >                                      
void op_par_loop_4(void (*kernel)( T0*, T1*, T2*, T3* ),                                 
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3){       
                                                                                         
  int           nargs = 4;                                                               
                                                                                         
  int              idxs[4] = { idx0, idx1, idx2,                                         
                                idx3 };                                                  
  int              dims[4] = { dim0, dim1, dim2,                                         
                                dim3 };                                                  
  op_datatype      typs[4] = { typ0, typ1, typ2,                                         
                                typ3 };                                                  
  op_access        accs[4] = { acc0, acc1, acc2,                                         
                                acc3 };                                                  
  int         *ptr_ptrs[4] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                             
                                ptr3.ptr };                                              
  int          ptr_dims[4] = { ptr0.dim, ptr1.dim, ptr2.dim,                             
                                ptr3.dim };                                              
  float         *f_dats[4] = { arg0.fdat, arg1.fdat, arg2.fdat,                          
                                arg3.fdat };                                             
  double        *d_dats[4] = { arg0.ddat, arg1.ddat, arg2.ddat,                          
                                arg3.ddat };                                             
  int           *i_dats[4] = { arg0.idat, arg1.idat, arg2.idat,                          
                                arg3.idat };                                             
  int          ptr_from[4] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,        
                                ptr3.from.index };                                       
  int            ptr_to[4] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,              
                                ptr3.to.index };                                         
  int          arg_sets[4] = { arg0.set.index, arg1.set.index, arg2.set.index,           
                                arg3.set.index };                                        
  int          arg_dims[4] = { arg0.dim, arg1.dim, arg2.dim,                             
                                arg3.dim };                                              
  op_datatype arg_types[4] = { arg0.type, arg1.type, arg2.type,                          
                                arg3.type };                                             
  float         *f_args[4];                                                              
  double        *d_args[4];                                                              
  int           *i_args[4];                                                              
  void            *args[4];                                                              
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3] );                 
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 5 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4 >                            
void op_par_loop_5(void (*kernel)( T0*, T1*, T2*, T3*, T4* ),                            
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4){       
                                                                                         
  int           nargs = 5;                                                               
                                                                                         
  int              idxs[5] = { idx0, idx1, idx2,                                         
                                idx3, idx4 };                                            
  int              dims[5] = { dim0, dim1, dim2,                                         
                                dim3, dim4 };                                            
  op_datatype      typs[5] = { typ0, typ1, typ2,                                         
                                typ3, typ4 };                                            
  op_access        accs[5] = { acc0, acc1, acc2,                                         
                                acc3, acc4 };                                            
  int         *ptr_ptrs[5] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                             
                                ptr3.ptr, ptr4.ptr };                                    
  int          ptr_dims[5] = { ptr0.dim, ptr1.dim, ptr2.dim,                             
                                ptr3.dim, ptr4.dim };                                    
  float         *f_dats[5] = { arg0.fdat, arg1.fdat, arg2.fdat,                          
                                arg3.fdat, arg4.fdat };                                  
  double        *d_dats[5] = { arg0.ddat, arg1.ddat, arg2.ddat,                          
                                arg3.ddat, arg4.ddat };                                  
  int           *i_dats[5] = { arg0.idat, arg1.idat, arg2.idat,                          
                                arg3.idat, arg4.idat };                                  
  int          ptr_from[5] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,        
                                ptr3.from.index, ptr4.from.index };                      
  int            ptr_to[5] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,              
                                ptr3.to.index, ptr4.to.index };                          
  int          arg_sets[5] = { arg0.set.index, arg1.set.index, arg2.set.index,           
                                arg3.set.index, arg4.set.index };                        
  int          arg_dims[5] = { arg0.dim, arg1.dim, arg2.dim,                             
                                arg3.dim, arg4.dim };                                    
  op_datatype arg_types[5] = { arg0.type, arg1.type, arg2.type,                          
                                arg3.type, arg4.type };                                  
  float         *f_args[5];                                                              
  double        *d_args[5];                                                              
  int           *i_args[5];                                                              
  void            *args[5];                                                              
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4] );  
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 6 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5 >                                                                    
void op_par_loop_6(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                              
                                    T5* ),                                               
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5){       
                                                                                         
  int           nargs = 6;                                                               
                                                                                         
  int              idxs[6] = { idx0, idx1, idx2,                                         
                                idx3, idx4, idx5 };                                      
  int              dims[6] = { dim0, dim1, dim2,                                         
                                dim3, dim4, dim5 };                                      
  op_datatype      typs[6] = { typ0, typ1, typ2,                                         
                                typ3, typ4, typ5 };                                      
  op_access        accs[6] = { acc0, acc1, acc2,                                         
                                acc3, acc4, acc5 };                                      
  int         *ptr_ptrs[6] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                             
                                ptr3.ptr, ptr4.ptr, ptr5.ptr };                          
  int          ptr_dims[6] = { ptr0.dim, ptr1.dim, ptr2.dim,                             
                                ptr3.dim, ptr4.dim, ptr5.dim };                          
  float         *f_dats[6] = { arg0.fdat, arg1.fdat, arg2.fdat,                          
                                arg3.fdat, arg4.fdat, arg5.fdat };                       
  double        *d_dats[6] = { arg0.ddat, arg1.ddat, arg2.ddat,                          
                                arg3.ddat, arg4.ddat, arg5.ddat };                       
  int           *i_dats[6] = { arg0.idat, arg1.idat, arg2.idat,                          
                                arg3.idat, arg4.idat, arg5.idat };                       
  int          ptr_from[6] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,        
                                ptr3.from.index, ptr4.from.index, ptr5.from.index };     
  int            ptr_to[6] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,              
                                ptr3.to.index, ptr4.to.index, ptr5.to.index };           
  int          arg_sets[6] = { arg0.set.index, arg1.set.index, arg2.set.index,           
                                arg3.set.index, arg4.set.index, arg5.set.index };        
  int          arg_dims[6] = { arg0.dim, arg1.dim, arg2.dim,                             
                                arg3.dim, arg4.dim, arg5.dim };                          
  op_datatype arg_types[6] = { arg0.type, arg1.type, arg2.type,                          
                                arg3.type, arg4.type, arg5.type };                       
  float         *f_args[6];                                                              
  double        *d_args[6];                                                              
  int           *i_args[6];                                                              
  void            *args[6];                                                              
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5] );                                                              
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 7 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6 >                                                          
void op_par_loop_7(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                              
                                    T5*, T6* ),                                          
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6){       
                                                                                         
  int           nargs = 7;                                                               
                                                                                         
  int              idxs[7] = { idx0, idx1, idx2,                                         
                                idx3, idx4, idx5,                                        
                                idx6 };                                                  
  int              dims[7] = { dim0, dim1, dim2,                                         
                                dim3, dim4, dim5,                                        
                                dim6 };                                                  
  op_datatype      typs[7] = { typ0, typ1, typ2,                                         
                                typ3, typ4, typ5,                                        
                                typ6 };                                                  
  op_access        accs[7] = { acc0, acc1, acc2,                                         
                                acc3, acc4, acc5,                                        
                                acc6 };                                                  
  int         *ptr_ptrs[7] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                             
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr };                                              
  int          ptr_dims[7] = { ptr0.dim, ptr1.dim, ptr2.dim,                             
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim };                                              
  float         *f_dats[7] = { arg0.fdat, arg1.fdat, arg2.fdat,                          
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat };                                             
  double        *d_dats[7] = { arg0.ddat, arg1.ddat, arg2.ddat,                          
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat };                                             
  int           *i_dats[7] = { arg0.idat, arg1.idat, arg2.idat,                          
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat };                                             
  int          ptr_from[7] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,        
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index };                                       
  int            ptr_to[7] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,              
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index };                                         
  int          arg_sets[7] = { arg0.set.index, arg1.set.index, arg2.set.index,           
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index };                                        
  int          arg_dims[7] = { arg0.dim, arg1.dim, arg2.dim,                             
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim };                                              
  op_datatype arg_types[7] = { arg0.type, arg1.type, arg2.type,                          
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type };                                             
  float         *f_args[7];                                                              
  double        *d_args[7];                                                              
  int           *i_args[7];                                                              
  void            *args[7];                                                              
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6] );                                               
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 8 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7 >                                                
void op_par_loop_8(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                              
                                    T5*, T6*, T7* ),                                     
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7){       
                                                                                         
  int           nargs = 8;                                                               
                                                                                         
  int              idxs[8] = { idx0, idx1, idx2,                                         
                                idx3, idx4, idx5,                                        
                                idx6, idx7 };                                            
  int              dims[8] = { dim0, dim1, dim2,                                         
                                dim3, dim4, dim5,                                        
                                dim6, dim7 };                                            
  op_datatype      typs[8] = { typ0, typ1, typ2,                                         
                                typ3, typ4, typ5,                                        
                                typ6, typ7 };                                            
  op_access        accs[8] = { acc0, acc1, acc2,                                         
                                acc3, acc4, acc5,                                        
                                acc6, acc7 };                                            
  int         *ptr_ptrs[8] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                             
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr };                                    
  int          ptr_dims[8] = { ptr0.dim, ptr1.dim, ptr2.dim,                             
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim };                                    
  float         *f_dats[8] = { arg0.fdat, arg1.fdat, arg2.fdat,                          
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat };                                  
  double        *d_dats[8] = { arg0.ddat, arg1.ddat, arg2.ddat,                          
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat };                                  
  int           *i_dats[8] = { arg0.idat, arg1.idat, arg2.idat,                          
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat };                                  
  int          ptr_from[8] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,        
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index };                      
  int            ptr_to[8] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,              
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index };                          
  int          arg_sets[8] = { arg0.set.index, arg1.set.index, arg2.set.index,           
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index };                        
  int          arg_dims[8] = { arg0.dim, arg1.dim, arg2.dim,                             
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim };                                    
  op_datatype arg_types[8] = { arg0.type, arg1.type, arg2.type,                          
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type };                                  
  float         *f_args[8];                                                              
  double        *d_args[8];                                                              
  int           *i_args[8];                                                              
  void            *args[8];                                                              
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7] );                                
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 9 arguments                                                   
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8 >                                      
void op_par_loop_9(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                              
                                    T5*, T6*, T7*, T8* ),                                
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8){       
                                                                                         
  int           nargs = 9;                                                               
                                                                                         
  int              idxs[9] = { idx0, idx1, idx2,                                         
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8 };                                      
  int              dims[9] = { dim0, dim1, dim2,                                         
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8 };                                      
  op_datatype      typs[9] = { typ0, typ1, typ2,                                         
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8 };                                      
  op_access        accs[9] = { acc0, acc1, acc2,                                         
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8 };                                      
  int         *ptr_ptrs[9] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                             
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr };                          
  int          ptr_dims[9] = { ptr0.dim, ptr1.dim, ptr2.dim,                             
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim };                          
  float         *f_dats[9] = { arg0.fdat, arg1.fdat, arg2.fdat,                          
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat };                       
  double        *d_dats[9] = { arg0.ddat, arg1.ddat, arg2.ddat,                          
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat };                       
  int           *i_dats[9] = { arg0.idat, arg1.idat, arg2.idat,                          
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat };                       
  int          ptr_from[9] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,        
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index };     
  int            ptr_to[9] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,              
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index };           
  int          arg_sets[9] = { arg0.set.index, arg1.set.index, arg2.set.index,           
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index };        
  int          arg_dims[9] = { arg0.dim, arg1.dim, arg2.dim,                             
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim };                          
  op_datatype arg_types[9] = { arg0.type, arg1.type, arg2.type,                          
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type };                       
  float         *f_args[9];                                                              
  double        *d_args[9];                                                              
  int           *i_args[9];                                                              
  void            *args[9];                                                              
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8] );                 
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 10 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9 >                            
void op_par_loop_10(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9* ),                           
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9){       
                                                                                         
  int           nargs = 10;                                                              
                                                                                         
  int              idxs[10] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9 };                                                  
  int              dims[10] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9 };                                                  
  op_datatype      typs[10] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9 };                                                  
  op_access        accs[10] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9 };                                                  
  int         *ptr_ptrs[10] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr };                                              
  int          ptr_dims[10] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim };                                              
  float         *f_dats[10] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat };                                             
  double        *d_dats[10] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat };                                             
  int           *i_dats[10] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat };                                             
  int          ptr_from[10] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index };                                       
  int            ptr_to[10] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index };                                         
  int          arg_sets[10] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index };                                        
  int          arg_dims[10] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim };                                              
  op_datatype arg_types[10] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type };                                             
  float         *f_args[10];                                                             
  double        *d_args[10];                                                             
  int           *i_args[10];                                                             
  void            *args[10];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9] );  
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 11 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10 >                                                                   
void op_par_loop_11(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10* ),                                              
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10){      
                                                                                         
  int           nargs = 11;                                                              
                                                                                         
  int              idxs[11] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10 };                                           
  int              dims[11] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10 };                                           
  op_datatype      typs[11] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10 };                                           
  op_access        accs[11] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10 };                                           
  int         *ptr_ptrs[11] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr };                                   
  int          ptr_dims[11] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim };                                   
  float         *f_dats[11] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat };                                 
  double        *d_dats[11] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat };                                 
  int           *i_dats[11] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat };                                 
  int          ptr_from[11] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index };                     
  int            ptr_to[11] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index };                         
  int          arg_sets[11] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index };                       
  int          arg_dims[11] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim };                                   
  op_datatype arg_types[11] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type };                                 
  float         *f_args[11];                                                             
  double        *d_args[11];                                                             
  int           *i_args[11];                                                             
  void            *args[11];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10] );                                                            
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 12 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11 >                                                         
void op_par_loop_12(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11* ),                                         
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10,       
  op_dat arg11,int idx11,op_ptr ptr11,int dim11,op_datatype typ11,op_access acc11){      
                                                                                         
  int           nargs = 12;                                                              
                                                                                         
  int              idxs[12] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10,idx11 };                                     
  int              dims[12] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10,dim11 };                                     
  op_datatype      typs[12] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10,typ11 };                                     
  op_access        accs[12] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10,acc11 };                                     
  int         *ptr_ptrs[12] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr,ptr11.ptr };                         
  int          ptr_dims[12] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim,ptr11.dim };                         
  float         *f_dats[12] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat,arg11.fdat };                      
  double        *d_dats[12] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat,arg11.ddat };                      
  int           *i_dats[12] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat,arg11.idat };                      
  int          ptr_from[12] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index,ptr11.from.index };    
  int            ptr_to[12] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index,ptr11.to.index };          
  int          arg_sets[12] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index,arg11.set.index };       
  int          arg_dims[12] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim,arg11.dim };                         
  op_datatype arg_types[12] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type,arg11.type };                      
  float         *f_args[12];                                                             
  double        *d_args[12];                                                             
  int           *i_args[12];                                                             
  void            *args[12];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10],(T11*)args[11] );                                             
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 13 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12 >                                               
void op_par_loop_13(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12* ),                                    
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10,       
  op_dat arg11,int idx11,op_ptr ptr11,int dim11,op_datatype typ11,op_access acc11,       
  op_dat arg12,int idx12,op_ptr ptr12,int dim12,op_datatype typ12,op_access acc12){      
                                                                                         
  int           nargs = 13;                                                              
                                                                                         
  int              idxs[13] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10,idx11,                                       
                                idx12 };                                                 
  int              dims[13] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10,dim11,                                       
                                dim12 };                                                 
  op_datatype      typs[13] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10,typ11,                                       
                                typ12 };                                                 
  op_access        accs[13] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10,acc11,                                       
                                acc12 };                                                 
  int         *ptr_ptrs[13] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr,ptr11.ptr,                           
                                ptr12.ptr };                                             
  int          ptr_dims[13] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim,ptr11.dim,                           
                                ptr12.dim };                                             
  float         *f_dats[13] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat,arg11.fdat,                        
                                arg12.fdat };                                            
  double        *d_dats[13] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat,arg11.ddat,                        
                                arg12.ddat };                                            
  int           *i_dats[13] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat,arg11.idat,                        
                                arg12.idat };                                            
  int          ptr_from[13] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index,ptr11.from.index,      
                                ptr12.from.index };                                      
  int            ptr_to[13] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index,ptr11.to.index,            
                                ptr12.to.index };                                        
  int          arg_sets[13] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index,arg11.set.index,         
                                arg12.set.index };                                       
  int          arg_dims[13] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim,arg11.dim,                           
                                arg12.dim };                                             
  op_datatype arg_types[13] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type,arg11.type,                        
                                arg12.type };                                            
  float         *f_args[13];                                                             
  double        *d_args[13];                                                             
  int           *i_args[13];                                                             
  void            *args[13];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10],(T11*)args[11],(T12*)args[12] );                              
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 14 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13 >                                     
void op_par_loop_14(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13* ),                               
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10,       
  op_dat arg11,int idx11,op_ptr ptr11,int dim11,op_datatype typ11,op_access acc11,       
  op_dat arg12,int idx12,op_ptr ptr12,int dim12,op_datatype typ12,op_access acc12,       
  op_dat arg13,int idx13,op_ptr ptr13,int dim13,op_datatype typ13,op_access acc13){      
                                                                                         
  int           nargs = 14;                                                              
                                                                                         
  int              idxs[14] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10,idx11,                                       
                                idx12,idx13 };                                           
  int              dims[14] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10,dim11,                                       
                                dim12,dim13 };                                           
  op_datatype      typs[14] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10,typ11,                                       
                                typ12,typ13 };                                           
  op_access        accs[14] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10,acc11,                                       
                                acc12,acc13 };                                           
  int         *ptr_ptrs[14] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr,ptr11.ptr,                           
                                ptr12.ptr,ptr13.ptr };                                   
  int          ptr_dims[14] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim,ptr11.dim,                           
                                ptr12.dim,ptr13.dim };                                   
  float         *f_dats[14] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat,arg11.fdat,                        
                                arg12.fdat,arg13.fdat };                                 
  double        *d_dats[14] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat,arg11.ddat,                        
                                arg12.ddat,arg13.ddat };                                 
  int           *i_dats[14] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat,arg11.idat,                        
                                arg12.idat,arg13.idat };                                 
  int          ptr_from[14] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index,ptr11.from.index,      
                                ptr12.from.index,ptr13.from.index };                     
  int            ptr_to[14] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index,ptr11.to.index,            
                                ptr12.to.index,ptr13.to.index };                         
  int          arg_sets[14] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index,arg11.set.index,         
                                arg12.set.index,arg13.set.index };                       
  int          arg_dims[14] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim,arg11.dim,                           
                                arg12.dim,arg13.dim };                                   
  op_datatype arg_types[14] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type,arg11.type,                        
                                arg12.type,arg13.type };                                 
  float         *f_args[14];                                                             
  double        *d_args[14];                                                             
  int           *i_args[14];                                                             
  void            *args[14];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10],(T11*)args[11],(T12*)args[12],(T13*)args[13] );               
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 15 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14 >                           
void op_par_loop_15(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14* ),                          
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10,       
  op_dat arg11,int idx11,op_ptr ptr11,int dim11,op_datatype typ11,op_access acc11,       
  op_dat arg12,int idx12,op_ptr ptr12,int dim12,op_datatype typ12,op_access acc12,       
  op_dat arg13,int idx13,op_ptr ptr13,int dim13,op_datatype typ13,op_access acc13,       
  op_dat arg14,int idx14,op_ptr ptr14,int dim14,op_datatype typ14,op_access acc14){      
                                                                                         
  int           nargs = 15;                                                              
                                                                                         
  int              idxs[15] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10,idx11,                                       
                                idx12,idx13,idx14 };                                     
  int              dims[15] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10,dim11,                                       
                                dim12,dim13,dim14 };                                     
  op_datatype      typs[15] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10,typ11,                                       
                                typ12,typ13,typ14 };                                     
  op_access        accs[15] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10,acc11,                                       
                                acc12,acc13,acc14 };                                     
  int         *ptr_ptrs[15] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr,ptr11.ptr,                           
                                ptr12.ptr,ptr13.ptr,ptr14.ptr };                         
  int          ptr_dims[15] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim,ptr11.dim,                           
                                ptr12.dim,ptr13.dim,ptr14.dim };                         
  float         *f_dats[15] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat,arg11.fdat,                        
                                arg12.fdat,arg13.fdat,arg14.fdat };                      
  double        *d_dats[15] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat,arg11.ddat,                        
                                arg12.ddat,arg13.ddat,arg14.ddat };                      
  int           *i_dats[15] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat,arg11.idat,                        
                                arg12.idat,arg13.idat,arg14.idat };                      
  int          ptr_from[15] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index,ptr11.from.index,      
                                ptr12.from.index,ptr13.from.index,ptr14.from.index };    
  int            ptr_to[15] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index,ptr11.to.index,            
                                ptr12.to.index,ptr13.to.index,ptr14.to.index };          
  int          arg_sets[15] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index,arg11.set.index,         
                                arg12.set.index,arg13.set.index,arg14.set.index };       
  int          arg_dims[15] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim,arg11.dim,                           
                                arg12.dim,arg13.dim,arg14.dim };                         
  op_datatype arg_types[15] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type,arg11.type,                        
                                arg12.type,arg13.type,arg14.type };                      
  float         *f_args[15];                                                             
  double        *d_args[15];                                                             
  int           *i_args[15];                                                             
  void            *args[15];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10],(T11*)args[11],(T12*)args[12],(T13*)args[13],(T14*)args[14] );
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 16 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15 >                                                                   
void op_par_loop_16(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15* ),                                              
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10,       
  op_dat arg11,int idx11,op_ptr ptr11,int dim11,op_datatype typ11,op_access acc11,       
  op_dat arg12,int idx12,op_ptr ptr12,int dim12,op_datatype typ12,op_access acc12,       
  op_dat arg13,int idx13,op_ptr ptr13,int dim13,op_datatype typ13,op_access acc13,       
  op_dat arg14,int idx14,op_ptr ptr14,int dim14,op_datatype typ14,op_access acc14,       
  op_dat arg15,int idx15,op_ptr ptr15,int dim15,op_datatype typ15,op_access acc15){      
                                                                                         
  int           nargs = 16;                                                              
                                                                                         
  int              idxs[16] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10,idx11,                                       
                                idx12,idx13,idx14,                                       
                                idx15 };                                                 
  int              dims[16] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10,dim11,                                       
                                dim12,dim13,dim14,                                       
                                dim15 };                                                 
  op_datatype      typs[16] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10,typ11,                                       
                                typ12,typ13,typ14,                                       
                                typ15 };                                                 
  op_access        accs[16] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10,acc11,                                       
                                acc12,acc13,acc14,                                       
                                acc15 };                                                 
  int         *ptr_ptrs[16] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr,ptr11.ptr,                           
                                ptr12.ptr,ptr13.ptr,ptr14.ptr,                           
                                ptr15.ptr };                                             
  int          ptr_dims[16] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim,ptr11.dim,                           
                                ptr12.dim,ptr13.dim,ptr14.dim,                           
                                ptr15.dim };                                             
  float         *f_dats[16] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat,arg11.fdat,                        
                                arg12.fdat,arg13.fdat,arg14.fdat,                        
                                arg15.fdat };                                            
  double        *d_dats[16] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat,arg11.ddat,                        
                                arg12.ddat,arg13.ddat,arg14.ddat,                        
                                arg15.ddat };                                            
  int           *i_dats[16] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat,arg11.idat,                        
                                arg12.idat,arg13.idat,arg14.idat,                        
                                arg15.idat };                                            
  int          ptr_from[16] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index,ptr11.from.index,      
                                ptr12.from.index,ptr13.from.index,ptr14.from.index,      
                                ptr15.from.index };                                      
  int            ptr_to[16] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index,ptr11.to.index,            
                                ptr12.to.index,ptr13.to.index,ptr14.to.index,            
                                ptr15.to.index };                                        
  int          arg_sets[16] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index,arg11.set.index,         
                                arg12.set.index,arg13.set.index,arg14.set.index,         
                                arg15.set.index };                                       
  int          arg_dims[16] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim,arg11.dim,                           
                                arg12.dim,arg13.dim,arg14.dim,                           
                                arg15.dim };                                             
  op_datatype arg_types[16] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type,arg11.type,                        
                                arg12.type,arg13.type,arg14.type,                        
                                arg15.type };                                            
  float         *f_args[16];                                                             
  double        *d_args[16];                                                             
  int           *i_args[16];                                                             
  void            *args[16];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10],(T11*)args[11],(T12*)args[12],(T13*)args[13],(T14*)args[14],  
            (T15*)args[15] );                                                            
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 17 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15,class T16 >                                                         
void op_par_loop_17(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15*,T16* ),                                         
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10,       
  op_dat arg11,int idx11,op_ptr ptr11,int dim11,op_datatype typ11,op_access acc11,       
  op_dat arg12,int idx12,op_ptr ptr12,int dim12,op_datatype typ12,op_access acc12,       
  op_dat arg13,int idx13,op_ptr ptr13,int dim13,op_datatype typ13,op_access acc13,       
  op_dat arg14,int idx14,op_ptr ptr14,int dim14,op_datatype typ14,op_access acc14,       
  op_dat arg15,int idx15,op_ptr ptr15,int dim15,op_datatype typ15,op_access acc15,       
  op_dat arg16,int idx16,op_ptr ptr16,int dim16,op_datatype typ16,op_access acc16){      
                                                                                         
  int           nargs = 17;                                                              
                                                                                         
  int              idxs[17] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10,idx11,                                       
                                idx12,idx13,idx14,                                       
                                idx15,idx16 };                                           
  int              dims[17] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10,dim11,                                       
                                dim12,dim13,dim14,                                       
                                dim15,dim16 };                                           
  op_datatype      typs[17] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10,typ11,                                       
                                typ12,typ13,typ14,                                       
                                typ15,typ16 };                                           
  op_access        accs[17] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10,acc11,                                       
                                acc12,acc13,acc14,                                       
                                acc15,acc16 };                                           
  int         *ptr_ptrs[17] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr,ptr11.ptr,                           
                                ptr12.ptr,ptr13.ptr,ptr14.ptr,                           
                                ptr15.ptr,ptr16.ptr };                                   
  int          ptr_dims[17] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim,ptr11.dim,                           
                                ptr12.dim,ptr13.dim,ptr14.dim,                           
                                ptr15.dim,ptr16.dim };                                   
  float         *f_dats[17] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat,arg11.fdat,                        
                                arg12.fdat,arg13.fdat,arg14.fdat,                        
                                arg15.fdat,arg16.fdat };                                 
  double        *d_dats[17] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat,arg11.ddat,                        
                                arg12.ddat,arg13.ddat,arg14.ddat,                        
                                arg15.ddat,arg16.ddat };                                 
  int           *i_dats[17] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat,arg11.idat,                        
                                arg12.idat,arg13.idat,arg14.idat,                        
                                arg15.idat,arg16.idat };                                 
  int          ptr_from[17] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index,ptr11.from.index,      
                                ptr12.from.index,ptr13.from.index,ptr14.from.index,      
                                ptr15.from.index,ptr16.from.index };                     
  int            ptr_to[17] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index,ptr11.to.index,            
                                ptr12.to.index,ptr13.to.index,ptr14.to.index,            
                                ptr15.to.index,ptr16.to.index };                         
  int          arg_sets[17] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index,arg11.set.index,         
                                arg12.set.index,arg13.set.index,arg14.set.index,         
                                arg15.set.index,arg16.set.index };                       
  int          arg_dims[17] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim,arg11.dim,                           
                                arg12.dim,arg13.dim,arg14.dim,                           
                                arg15.dim,arg16.dim };                                   
  op_datatype arg_types[17] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type,arg11.type,                        
                                arg12.type,arg13.type,arg14.type,                        
                                arg15.type,arg16.type };                                 
  float         *f_args[17];                                                             
  double        *d_args[17];                                                             
  int           *i_args[17];                                                             
  void            *args[17];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10],(T11*)args[11],(T12*)args[12],(T13*)args[13],(T14*)args[14],  
            (T15*)args[15],(T16*)args[16] );                                             
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 18 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15,class T16,class T17 >                                               
void op_par_loop_18(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15*,T16*,T17* ),                                    
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10,       
  op_dat arg11,int idx11,op_ptr ptr11,int dim11,op_datatype typ11,op_access acc11,       
  op_dat arg12,int idx12,op_ptr ptr12,int dim12,op_datatype typ12,op_access acc12,       
  op_dat arg13,int idx13,op_ptr ptr13,int dim13,op_datatype typ13,op_access acc13,       
  op_dat arg14,int idx14,op_ptr ptr14,int dim14,op_datatype typ14,op_access acc14,       
  op_dat arg15,int idx15,op_ptr ptr15,int dim15,op_datatype typ15,op_access acc15,       
  op_dat arg16,int idx16,op_ptr ptr16,int dim16,op_datatype typ16,op_access acc16,       
  op_dat arg17,int idx17,op_ptr ptr17,int dim17,op_datatype typ17,op_access acc17){      
                                                                                         
  int           nargs = 18;                                                              
                                                                                         
  int              idxs[18] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10,idx11,                                       
                                idx12,idx13,idx14,                                       
                                idx15,idx16,idx17 };                                     
  int              dims[18] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10,dim11,                                       
                                dim12,dim13,dim14,                                       
                                dim15,dim16,dim17 };                                     
  op_datatype      typs[18] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10,typ11,                                       
                                typ12,typ13,typ14,                                       
                                typ15,typ16,typ17 };                                     
  op_access        accs[18] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10,acc11,                                       
                                acc12,acc13,acc14,                                       
                                acc15,acc16,acc17 };                                     
  int         *ptr_ptrs[18] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr,ptr11.ptr,                           
                                ptr12.ptr,ptr13.ptr,ptr14.ptr,                           
                                ptr15.ptr,ptr16.ptr,ptr17.ptr };                         
  int          ptr_dims[18] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim,ptr11.dim,                           
                                ptr12.dim,ptr13.dim,ptr14.dim,                           
                                ptr15.dim,ptr16.dim,ptr17.dim };                         
  float         *f_dats[18] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat,arg11.fdat,                        
                                arg12.fdat,arg13.fdat,arg14.fdat,                        
                                arg15.fdat,arg16.fdat,arg17.fdat };                      
  double        *d_dats[18] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat,arg11.ddat,                        
                                arg12.ddat,arg13.ddat,arg14.ddat,                        
                                arg15.ddat,arg16.ddat,arg17.ddat };                      
  int           *i_dats[18] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat,arg11.idat,                        
                                arg12.idat,arg13.idat,arg14.idat,                        
                                arg15.idat,arg16.idat,arg17.idat };                      
  int          ptr_from[18] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index,ptr11.from.index,      
                                ptr12.from.index,ptr13.from.index,ptr14.from.index,      
                                ptr15.from.index,ptr16.from.index,ptr17.from.index };    
  int            ptr_to[18] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index,ptr11.to.index,            
                                ptr12.to.index,ptr13.to.index,ptr14.to.index,            
                                ptr15.to.index,ptr16.to.index,ptr17.to.index };          
  int          arg_sets[18] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index,arg11.set.index,         
                                arg12.set.index,arg13.set.index,arg14.set.index,         
                                arg15.set.index,arg16.set.index,arg17.set.index };       
  int          arg_dims[18] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim,arg11.dim,                           
                                arg12.dim,arg13.dim,arg14.dim,                           
                                arg15.dim,arg16.dim,arg17.dim };                         
  op_datatype arg_types[18] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type,arg11.type,                        
                                arg12.type,arg13.type,arg14.type,                        
                                arg15.type,arg16.type,arg17.type };                      
  float         *f_args[18];                                                             
  double        *d_args[18];                                                             
  int           *i_args[18];                                                             
  void            *args[18];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10],(T11*)args[11],(T12*)args[12],(T13*)args[13],(T14*)args[14],  
            (T15*)args[15],(T16*)args[16],(T17*)args[17] );                              
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 19 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15,class T16,class T17,class T18 >                                     
void op_par_loop_19(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15*,T16*,T17*,T18* ),                               
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10,       
  op_dat arg11,int idx11,op_ptr ptr11,int dim11,op_datatype typ11,op_access acc11,       
  op_dat arg12,int idx12,op_ptr ptr12,int dim12,op_datatype typ12,op_access acc12,       
  op_dat arg13,int idx13,op_ptr ptr13,int dim13,op_datatype typ13,op_access acc13,       
  op_dat arg14,int idx14,op_ptr ptr14,int dim14,op_datatype typ14,op_access acc14,       
  op_dat arg15,int idx15,op_ptr ptr15,int dim15,op_datatype typ15,op_access acc15,       
  op_dat arg16,int idx16,op_ptr ptr16,int dim16,op_datatype typ16,op_access acc16,       
  op_dat arg17,int idx17,op_ptr ptr17,int dim17,op_datatype typ17,op_access acc17,       
  op_dat arg18,int idx18,op_ptr ptr18,int dim18,op_datatype typ18,op_access acc18){      
                                                                                         
  int           nargs = 19;                                                              
                                                                                         
  int              idxs[19] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10,idx11,                                       
                                idx12,idx13,idx14,                                       
                                idx15,idx16,idx17,                                       
                                idx18 };                                                 
  int              dims[19] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10,dim11,                                       
                                dim12,dim13,dim14,                                       
                                dim15,dim16,dim17,                                       
                                dim18 };                                                 
  op_datatype      typs[19] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10,typ11,                                       
                                typ12,typ13,typ14,                                       
                                typ15,typ16,typ17,                                       
                                typ18 };                                                 
  op_access        accs[19] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10,acc11,                                       
                                acc12,acc13,acc14,                                       
                                acc15,acc16,acc17,                                       
                                acc18 };                                                 
  int         *ptr_ptrs[19] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr,ptr11.ptr,                           
                                ptr12.ptr,ptr13.ptr,ptr14.ptr,                           
                                ptr15.ptr,ptr16.ptr,ptr17.ptr,                           
                                ptr18.ptr };                                             
  int          ptr_dims[19] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim,ptr11.dim,                           
                                ptr12.dim,ptr13.dim,ptr14.dim,                           
                                ptr15.dim,ptr16.dim,ptr17.dim,                           
                                ptr18.dim };                                             
  float         *f_dats[19] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat,arg11.fdat,                        
                                arg12.fdat,arg13.fdat,arg14.fdat,                        
                                arg15.fdat,arg16.fdat,arg17.fdat,                        
                                arg18.fdat };                                            
  double        *d_dats[19] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat,arg11.ddat,                        
                                arg12.ddat,arg13.ddat,arg14.ddat,                        
                                arg15.ddat,arg16.ddat,arg17.ddat,                        
                                arg18.ddat };                                            
  int           *i_dats[19] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat,arg11.idat,                        
                                arg12.idat,arg13.idat,arg14.idat,                        
                                arg15.idat,arg16.idat,arg17.idat,                        
                                arg18.idat };                                            
  int          ptr_from[19] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index,ptr11.from.index,      
                                ptr12.from.index,ptr13.from.index,ptr14.from.index,      
                                ptr15.from.index,ptr16.from.index,ptr17.from.index,      
                                ptr18.from.index };                                      
  int            ptr_to[19] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index,ptr11.to.index,            
                                ptr12.to.index,ptr13.to.index,ptr14.to.index,            
                                ptr15.to.index,ptr16.to.index,ptr17.to.index,            
                                ptr18.to.index };                                        
  int          arg_sets[19] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index,arg11.set.index,         
                                arg12.set.index,arg13.set.index,arg14.set.index,         
                                arg15.set.index,arg16.set.index,arg17.set.index,         
                                arg18.set.index };                                       
  int          arg_dims[19] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim,arg11.dim,                           
                                arg12.dim,arg13.dim,arg14.dim,                           
                                arg15.dim,arg16.dim,arg17.dim,                           
                                arg18.dim };                                             
  op_datatype arg_types[19] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type,arg11.type,                        
                                arg12.type,arg13.type,arg14.type,                        
                                arg15.type,arg16.type,arg17.type,                        
                                arg18.type };                                            
  float         *f_args[19];                                                             
  double        *d_args[19];                                                             
  int           *i_args[19];                                                             
  void            *args[19];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10],(T11*)args[11],(T12*)args[12],(T13*)args[13],(T14*)args[14],  
            (T15*)args[15],(T16*)args[16],(T17*)args[17],(T18*)args[18] );               
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
//                                                                                       
// op_par_loop routine for 20 arguments                                                  
//                                                                                       
                                                                                         
template < class T0, class T1, class T2, class T3, class T4,                             
           class T5, class T6, class T7, class T8, class T9,                             
           class T10,class T11,class T12,class T13,class T14,                            
           class T15,class T16,class T17,class T18,class T19 >                           
void op_par_loop_20(void (*kernel)( T0*, T1*, T2*, T3*, T4*,                             
                                    T5*, T6*, T7*, T8*, T9*,                             
                                    T10*,T11*,T12*,T13*,T14*,                            
                                    T15*,T16*,T17*,T18*,T19* ),                          
  char const * name, op_set set,                                                         
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, op_datatype typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, op_datatype typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, op_datatype typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, op_datatype typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, op_datatype typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, op_datatype typ5, op_access acc5,        
  op_dat arg6, int idx6, op_ptr ptr6, int dim6, op_datatype typ6, op_access acc6,        
  op_dat arg7, int idx7, op_ptr ptr7, int dim7, op_datatype typ7, op_access acc7,        
  op_dat arg8, int idx8, op_ptr ptr8, int dim8, op_datatype typ8, op_access acc8,        
  op_dat arg9, int idx9, op_ptr ptr9, int dim9, op_datatype typ9, op_access acc9,        
  op_dat arg10,int idx10,op_ptr ptr10,int dim10,op_datatype typ10,op_access acc10,       
  op_dat arg11,int idx11,op_ptr ptr11,int dim11,op_datatype typ11,op_access acc11,       
  op_dat arg12,int idx12,op_ptr ptr12,int dim12,op_datatype typ12,op_access acc12,       
  op_dat arg13,int idx13,op_ptr ptr13,int dim13,op_datatype typ13,op_access acc13,       
  op_dat arg14,int idx14,op_ptr ptr14,int dim14,op_datatype typ14,op_access acc14,       
  op_dat arg15,int idx15,op_ptr ptr15,int dim15,op_datatype typ15,op_access acc15,       
  op_dat arg16,int idx16,op_ptr ptr16,int dim16,op_datatype typ16,op_access acc16,       
  op_dat arg17,int idx17,op_ptr ptr17,int dim17,op_datatype typ17,op_access acc17,       
  op_dat arg18,int idx18,op_ptr ptr18,int dim18,op_datatype typ18,op_access acc18,       
  op_dat arg19,int idx19,op_ptr ptr19,int dim19,op_datatype typ19,op_access acc19){      
                                                                                         
  int           nargs = 20;                                                              
                                                                                         
  int              idxs[20] = { idx0, idx1, idx2,                                        
                                idx3, idx4, idx5,                                        
                                idx6, idx7, idx8,                                        
                                idx9, idx10,idx11,                                       
                                idx12,idx13,idx14,                                       
                                idx15,idx16,idx17,                                       
                                idx18,idx19 };                                           
  int              dims[20] = { dim0, dim1, dim2,                                        
                                dim3, dim4, dim5,                                        
                                dim6, dim7, dim8,                                        
                                dim9, dim10,dim11,                                       
                                dim12,dim13,dim14,                                       
                                dim15,dim16,dim17,                                       
                                dim18,dim19 };                                           
  op_datatype      typs[20] = { typ0, typ1, typ2,                                        
                                typ3, typ4, typ5,                                        
                                typ6, typ7, typ8,                                        
                                typ9, typ10,typ11,                                       
                                typ12,typ13,typ14,                                       
                                typ15,typ16,typ17,                                       
                                typ18,typ19 };                                           
  op_access        accs[20] = { acc0, acc1, acc2,                                        
                                acc3, acc4, acc5,                                        
                                acc6, acc7, acc8,                                        
                                acc9, acc10,acc11,                                       
                                acc12,acc13,acc14,                                       
                                acc15,acc16,acc17,                                       
                                acc18,acc19 };                                           
  int         *ptr_ptrs[20] = { ptr0.ptr, ptr1.ptr, ptr2.ptr,                            
                                ptr3.ptr, ptr4.ptr, ptr5.ptr,                            
                                ptr6.ptr, ptr7.ptr, ptr8.ptr,                            
                                ptr9.ptr, ptr10.ptr,ptr11.ptr,                           
                                ptr12.ptr,ptr13.ptr,ptr14.ptr,                           
                                ptr15.ptr,ptr16.ptr,ptr17.ptr,                           
                                ptr18.ptr,ptr19.ptr };                                   
  int          ptr_dims[20] = { ptr0.dim, ptr1.dim, ptr2.dim,                            
                                ptr3.dim, ptr4.dim, ptr5.dim,                            
                                ptr6.dim, ptr7.dim, ptr8.dim,                            
                                ptr9.dim, ptr10.dim,ptr11.dim,                           
                                ptr12.dim,ptr13.dim,ptr14.dim,                           
                                ptr15.dim,ptr16.dim,ptr17.dim,                           
                                ptr18.dim,ptr19.dim };                                   
  float         *f_dats[20] = { arg0.fdat, arg1.fdat, arg2.fdat,                         
                                arg3.fdat, arg4.fdat, arg5.fdat,                         
                                arg6.fdat, arg7.fdat, arg8.fdat,                         
                                arg9.fdat, arg10.fdat,arg11.fdat,                        
                                arg12.fdat,arg13.fdat,arg14.fdat,                        
                                arg15.fdat,arg16.fdat,arg17.fdat,                        
                                arg18.fdat,arg19.fdat };                                 
  double        *d_dats[20] = { arg0.ddat, arg1.ddat, arg2.ddat,                         
                                arg3.ddat, arg4.ddat, arg5.ddat,                         
                                arg6.ddat, arg7.ddat, arg8.ddat,                         
                                arg9.ddat, arg10.ddat,arg11.ddat,                        
                                arg12.ddat,arg13.ddat,arg14.ddat,                        
                                arg15.ddat,arg16.ddat,arg17.ddat,                        
                                arg18.ddat,arg19.ddat };                                 
  int           *i_dats[20] = { arg0.idat, arg1.idat, arg2.idat,                         
                                arg3.idat, arg4.idat, arg5.idat,                         
                                arg6.idat, arg7.idat, arg8.idat,                         
                                arg9.idat, arg10.idat,arg11.idat,                        
                                arg12.idat,arg13.idat,arg14.idat,                        
                                arg15.idat,arg16.idat,arg17.idat,                        
                                arg18.idat,arg19.idat };                                 
  int          ptr_from[20] = { ptr0.from.index, ptr1.from.index, ptr2.from.index,       
                                ptr3.from.index, ptr4.from.index, ptr5.from.index,       
                                ptr6.from.index, ptr7.from.index, ptr8.from.index,       
                                ptr9.from.index, ptr10.from.index,ptr11.from.index,      
                                ptr12.from.index,ptr13.from.index,ptr14.from.index,      
                                ptr15.from.index,ptr16.from.index,ptr17.from.index,      
                                ptr18.from.index,ptr19.from.index };                     
  int            ptr_to[20] = { ptr0.to.index, ptr1.to.index, ptr2.to.index,             
                                ptr3.to.index, ptr4.to.index, ptr5.to.index,             
                                ptr6.to.index, ptr7.to.index, ptr8.to.index,             
                                ptr9.to.index, ptr10.to.index,ptr11.to.index,            
                                ptr12.to.index,ptr13.to.index,ptr14.to.index,            
                                ptr15.to.index,ptr16.to.index,ptr17.to.index,            
                                ptr18.to.index,ptr19.to.index };                         
  int          arg_sets[20] = { arg0.set.index, arg1.set.index, arg2.set.index,          
                                arg3.set.index, arg4.set.index, arg5.set.index,          
                                arg6.set.index, arg7.set.index, arg8.set.index,          
                                arg9.set.index, arg10.set.index,arg11.set.index,         
                                arg12.set.index,arg13.set.index,arg14.set.index,         
                                arg15.set.index,arg16.set.index,arg17.set.index,         
                                arg18.set.index,arg19.set.index };                       
  int          arg_dims[20] = { arg0.dim, arg1.dim, arg2.dim,                            
                                arg3.dim, arg4.dim, arg5.dim,                            
                                arg6.dim, arg7.dim, arg8.dim,                            
                                arg9.dim, arg10.dim,arg11.dim,                           
                                arg12.dim,arg13.dim,arg14.dim,                           
                                arg15.dim,arg16.dim,arg17.dim,                           
                                arg18.dim,arg19.dim };                                   
  op_datatype arg_types[20] = { arg0.type, arg1.type, arg2.type,                         
                                arg3.type, arg4.type, arg5.type,                         
                                arg6.type, arg7.type, arg8.type,                         
                                arg9.type, arg10.type,arg11.type,                        
                                arg12.type,arg13.type,arg14.type,                        
                                arg15.type,arg16.type,arg17.type,                        
                                arg18.type,arg19.type };                                 
  float         *f_args[20];                                                             
  double        *d_args[20];                                                             
  int           *i_args[20];                                                             
  void            *args[20];                                                             
                                                                                         
  int n2, ninds=0;                                                                       
                                                                                         
  // consistency checks                                                                  
                                                                                         
  if (OP_DIAGS>0) {                                                                      
    for (int m=0; m<nargs; m++) {                                                        
      if (idxs[m]>=0) ninds++;                                                           
                                                                                         
      if (idxs[m] == -1) {                                                               
        if (ptr_ptrs[m] != NULL) {                                                       
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      else {                                                                             
        if (set.index != ptr_from[m] || arg_sets[m] != ptr_to[m]) {                      
          printf("error: wrong pointer for arg %d in kernel \"%s\"\n",m,name);           
          exit(1);                                                                       
        }                                                                                
        if (ptr_dims[m] <= idxs[m]) {                                                    
          printf(" %d %d",ptr_dims[m],idxs[m]);                                          
          printf("error: invalid pointer index for arg %d in kernel \"%s\"\n",m,name);   
          exit(1);                                                                       
        }                                                                                
      }                                                                                  
      if (arg_types[m] != typs[m]) {                                                     
        printf("error: wrong datatype for arg %d in kernel \"%s\"\n",m,name);            
        exit(1);                                                                         
      }                                                                                  
      if (arg_dims[m] != dims[m]) {                                                      
        printf("error: wrong dimension for arg %d in kernel \"%s\"\n",m,name);           
        exit(1);                                                                         
      }                                                                                  
    }                                                                                    
  }                                                                                      
                                                                                         
  if (OP_DIAGS>1) {                                                                      
    if (ninds==0)                                                                        
      printf(" kernel routine w/o indirection:  %s \n",name);                            
    else                                                                                 
      printf(" kernel routine with indirection: %s \n",name);                            
  }                                                                                      
                                                                                         
  // allocate memory for local arrays, and                                               
  // initialise to zero (important for increments)                                       
                                                                                         
  for (int m=0; m<nargs; m++) {                                                          
    if (typs[m] == OP_FLOAT) {                                                           
      args[m]   = calloc(dims[m],sizeof(float));                                         
      f_args[m] = (float *) args[m];                                                     
    }                                                                                    
    else if (typs[m] == OP_DOUBLE) {                                                     
      args[m]   = calloc(dims[m],sizeof(double));                                        
      d_args[m] = (double *) args[m];                                                    
    }                                                                                    
    else if (typs[m] == OP_INT) {                                                        
      args[m]   = calloc(dims[m],sizeof(int));                                           
      i_args[m] = (int *) args[m];                                                       
    }                                                                                    
  }                                                                                      
                                                                                         
  // loop over set elements                                                              
                                                                                         
  for (int n=0; n<set.size; n++) {                                                       
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_READ || accs[m]==OP_RW) {                                          
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_args[m][p] = f_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_args[m][p] = d_dats[m][p+n2*dims[m]];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_args[m][p] = i_dats[m][p+n2*dims[m]];           
      }                                                                                  
    }                                                                                    
                                                                                         
    // call kernel function, passing in pointers to data                                 
                                                                                         
    kernel( (T0*)args[0],  (T1*)args[1],  (T2*)args[2],  (T3*)args[3],  (T4*)args[4],    
            (T5*)args[5],  (T6*)args[6],  (T7*)args[7],  (T8*)args[8],  (T9*)args[9],    
            (T10*)args[10],(T11*)args[11],(T12*)args[12],(T13*)args[13],(T14*)args[14],  
            (T15*)args[15],(T16*)args[16],(T17*)args[17],(T18*)args[18],(T19*)args[19] );
                                                                                         
    for (int m=0; m<nargs; m++) {                                                        
      if (accs[m]==OP_WRITE || accs[m]==OP_RW) {                                         
                                                                                         
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) f_dats[m][p+n2*dims[m]] = f_args[m][p];           
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) d_dats[m][p+n2*dims[m]] = d_args[m][p];           
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) i_dats[m][p+n2*dims[m]] = i_args[m][p];           
      }                                                                                  
                                                                                         
      if (accs[m]==OP_INC) {                                                             
        if (ptr_dims[m]==0)                 // identity mapping                          
          n2 = n;                                                                        
        else                                // standard pointers                         
          n2 = ptr_ptrs[m][idxs[m]+n*ptr_dims[m]];                                       
                                                                                         
        if (typs[m] == OP_FLOAT)                                                         
          for(int p=0; p<dims[m]; p++) {                                                 
            f_dats[m][p+n2*dims[m]] += f_args[m][p];                                     
            f_args[m][p] = 0.0f;                                                         
          }                                                                              
        else if (typs[m] == OP_DOUBLE)                                                   
          for(int p=0; p<dims[m]; p++) {                                                 
            d_dats[m][p+n2*dims[m]] += d_args[m][p];                                     
            d_args[m][p] = 0.0;                                                          
          }                                                                              
        else if (typs[m] == OP_INT)                                                      
          for(int p=0; p<dims[m]; p++) {                                                 
            i_dats[m][p+n2*dims[m]] += i_args[m][p];                                     
            i_args[m][p] = 0;                                                            
          }                                                                              
      }                                                                                  
    }                                                                                    
  }                                                                                      
}                                                                                        
