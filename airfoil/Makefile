#
# set paths for header files and libraries
#

OP2		:= ../common
CUDA		:= $(CUDA_INSTALL_PATH)
INC		:= -I$(CUDA)/include -I$(OP2) -I.
LIB		:= -L$(CUDA)/lib64

#
# set flags for compilation and linking
#

# -Xptxas -dlcm=ca   => use L1 cache
# -Xptxas -dlcm=cg   => no L1 cache

#CCFLAGS	:= -g -fPIC -DUNIX -Wall -Wextra
#NVCCFLAGS	:= -g -G -arch=sm_20 -Xptxas=-v -use_fast_math

CCFLAGS		:= -O3 -fPIC -DUNIX -Wall -Wextra
#NVCCFLAGS	:= -O3 -maxrregcount 48 -arch=sm_20 \
#		   -Xptxas -dlcm=cg -Xptxas=-v -use_fast_math
NVCCFLAGS	:= -O3 -arch=sm_20 \
		   -Xptxas -dlcm=ca -Xptxas=-v -use_fast_math
LIBS		:= $(LIB) -lcudart
OMP		:= -fopenmp -lgomp

#
# master to make all versions
#

all:		airfoil_seq airfoil_op airfoil_cuda

#
# core OP2 library written in C99 for interoperability with FORTRAN 9x
#

op_lib_core.o:	$(OP2)/op_lib_core.c $(OP2)/op_lib_core.h
		gcc -o op_lib_core.o -std=c99 -c $(OP2)/op_lib_core.c

#
# simple sequential version
#

airfoil_seq:	airfoil.cpp save_soln.h adt_calc.h res_calc.h bres_calc.h \
		op_lib_core.o Makefile
		g++ $(INC) -o airfoil_seq airfoil.cpp op_lib_core.o

#
# x86 version using kernel files generated by op2.m
#

airfoil_op:	airfoil_op.cpp airfoil_kernels.cpp \
		save_soln_kernel.cpp  save_soln.h \
		adt_calc_kernel.cpp   adt_calc.h  \
		res_calc_kernel.cpp   res_calc.h  \
		bres_calc_kernel.cpp  bres_calc.h \
		update_kernel.cpp     update.h    \
                op_lib_core.o Makefile
		g++ $(INC) $(OMP) -o airfoil_op airfoil_op.cpp \
		                     airfoil_kernels.cpp op_lib_core.o

#
# CUDA version using kernel files generated by op2.m
#

airfoil_cuda:	airfoil_op.cpp airfoil_kernels_cu.o \
		op_lib_core.o Makefile
		g++ $(INC) -fPIC -o airfoil_cuda airfoil_op.cpp \
		                    airfoil_kernels_cu.o op_lib_core.o $(LIBS)

airfoil_kernels_cu.o:	airfoil_kernels.cu      \
		save_soln_kernel.cu save_soln.h \
		adt_calc_kernel.cu  adt_calc.h  \
		res_calc_kernel.cu  res_calc.h  \
		bres_calc_kernel.cu bres_calc.h \
		update_kernel.cu    update.h    \
                $(OP2)/op_lib.cu $(OP2)/op_lib.h $(OP2)/op_lib_core.h Makefile
		nvcc $(INC) $(NVCCFLAGS) -c -o airfoil_kernels_cu.o airfoil_kernels.cu

#
# cleanup
#

clean:
		rm -f airfoil_seq airfoil_op airfoil_cuda *.o
