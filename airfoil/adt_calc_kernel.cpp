// 
// auto-generated by op2.m on 29-Oct-2010 14:49:58 
//

// user function                                                                         
                                                                                         
#include "adt_calc.h"                                                                    
                                                                                         
                                                                                         
// x86 kernel function                                                                   
                                                                                         
void op_x86_adt_calc(                                                                    
  int    blockIdx,                                                                       
  float *ind_arg0, int *ind_arg0_ptrs, int *ind_arg0_sizes, int *ind_arg0_offset,        
  int   *arg0_ptrs,                                                                      
  int   *arg1_ptrs,                                                                      
  int   *arg2_ptrs,                                                                      
  int   *arg3_ptrs,                                                                      
  float *arg4_d,                                                                         
  float *arg5_d,                                                                         
  int    block_offset,                                                                   
  int   *blkmap,                                                                         
  int   *offset,                                                                         
  int   *nelems,                                                                         
  int   *ncolors,                                                                        
  int   *colors) {                                                                       
                                                                                         
                                                                                         
  int   *ind_arg0_ptr, ind_arg0_size;                                         
  float *ind_arg0_s;                                                          
  int   *arg0_ptr;                                                            
  int   *arg1_ptr;                                                            
  int   *arg2_ptr;                                                            
  int   *arg3_ptr;                                                            
  float *arg4;                                                                
  float *arg5;                                                                
  int    blockId, nelem;                                                      
                                                                                         
  char shared[64000];                                                         
                                                                                         
  if (0==0) {                                                                            
                                                                                         
    // get sizes and shift pointers and direct-mapped data                               
                                                                                         
    blockId = blkmap[blockIdx + block_offset];                                           
    nelem   = nelems[blockId];                                                           
                                                                                         
    ind_arg0_size = ind_arg0_sizes[blockId];                                             
                                                                                         
    ind_arg0_ptr = ind_arg0_ptrs + ind_arg0_offset[blockId];                             
                                                                                         
    arg0_ptr     = arg0_ptrs + offset[blockId];                                          
    arg1_ptr     = arg1_ptrs + offset[blockId];                                          
    arg2_ptr     = arg2_ptrs + offset[blockId];                                          
    arg3_ptr     = arg3_ptrs + offset[blockId];                                          
    arg4         = arg4_d    + offset[blockId]*4;                                        
    arg5         = arg5_d    + offset[blockId]*1;                                        
                                                                                         
    // set shared memory pointers                                                        
                                                                                         
    int nbytes = 0;                                                                      
    ind_arg0_s = (float *) &shared[nbytes];                                              
  }                                                                                      
                                                                                         
  __syncthreads(); // make sure all of above completed                                   
                                                                                         
  // copy indirect datasets into shared memory or zero increment                         
                                                                                         
  for (int n=0; n<ind_arg0_size; n++)                                                    
    for (int d=0; d<2; d++)                                                              
      ind_arg0_s[d+n*2] = ind_arg0[d+ind_arg0_ptr[n]*2];                                 
                                                                                         
  __syncthreads();                                                                       
                                                                                         
  // process set elements                                                                
                                                                                         
  for (int n=0; n<nelem; n++) {                                                          
                                                                                         
      // user-supplied kernel call                                                       
                                                                                         
      adt_calc( ind_arg0_s+arg0_ptr[n]*2,                                                
                ind_arg0_s+arg1_ptr[n]*2,                                                
                ind_arg0_s+arg2_ptr[n]*2,                                                
                ind_arg0_s+arg3_ptr[n]*2,                                                
                arg4+n*4,                                                                
                arg5+n*1 );                                                              
  }                                                                                      
                                                                                         
}                                                                                        
                                                                                         
                                                                                         
// host stub function                                                                    
                                                                                         
void op_par_loop_adt_calc(char const *name, op_set set,                                  
  op_dat arg0, int idx0, op_ptr ptr0, int dim0, char const *typ0, op_access acc0,        
  op_dat arg1, int idx1, op_ptr ptr1, int dim1, char const *typ1, op_access acc1,        
  op_dat arg2, int idx2, op_ptr ptr2, int dim2, char const *typ2, op_access acc2,        
  op_dat arg3, int idx3, op_ptr ptr3, int dim3, char const *typ3, op_access acc3,        
  op_dat arg4, int idx4, op_ptr ptr4, int dim4, char const *typ4, op_access acc4,        
  op_dat arg5, int idx5, op_ptr ptr5, int dim5, char const *typ5, op_access acc5){       
                                                                                         
                                                                                         
  int         nargs = 6, ninds = 1;                                                      
                                                                                         
  op_dat      args[6] = {arg0,arg1,arg2,arg3,arg4,arg5};                                 
  int         idxs[6] = {idx0,idx1,idx2,idx3,idx4,idx5};                                 
  op_ptr      ptrs[6] = {ptr0,ptr1,ptr2,ptr3,ptr4,ptr5};                                 
  int         dims[6] = {dim0,dim1,dim2,dim3,dim4,dim5};                                 
  char const *typs[6] = {typ0,typ1,typ2,typ3,typ4,typ5};                                 
  op_access   accs[6] = {acc0,acc1,acc2,acc3,acc4,acc5};                                 
  int         inds[6] = {0,0,0,0,-1,-1};                                                 
                                                                                         
  if (OP_diags>2) {                                                                      
    printf(" kernel routine with indirection: adt_calc \n");                             
  }                                                                                      
                                                                                         
  // initialise timers                                                                   
                                                                                         
  double cpu_t1, cpu_t2, wall_t1, wall_t2;                                               
  timers(&cpu_t1, &wall_t1);                                                             
                                                                                         
  // set number of threads                                                               
                                                                                         
#ifdef _OPENMP                                                                           
  int nthreads = omp_get_max_threads( );                                                 
#else                                                                                    
  int nthreads = 1;                                                                      
#endif                                                                                   
                                                                                         
  // get plan                                                                            
                                                                                         
  op_plan *Plan = plan(name,set,nargs,args,idxs,ptrs,dims,typs,accs,ninds,inds);         
                                                                                         
  // execute plan                                                                        
                                                                                         
  int block_offset = 0;                                                                  
                                                                                         
  for (int col=0; col<(*Plan).ncolors; col++) {                                          
    int nblocks = (*Plan).ncolblk[col];                                                  
                                                                                         
#pragma omp parallel for                                                                 
    for (int blockIdx=0; blockIdx<nblocks; blockIdx++)                                   
     op_x86_adt_calc( blockIdx,                                                          
       (float *)arg0.dat, (*Plan).ind_ptrs[0], (*Plan).ind_sizes[0], (*Plan).ind_offs[0],
       (*Plan).ptrs[0],                                                                  
       (*Plan).ptrs[1],                                                                  
       (*Plan).ptrs[2],                                                                  
       (*Plan).ptrs[3],                                                                  
       (float *)arg4.dat,                                                                
       (float *)arg5.dat,                                                                
       block_offset,                                                                     
       (*Plan).blkmap,                                                                   
       (*Plan).offset,                                                                   
       (*Plan).nelems,                                                                   
       (*Plan).nthrcol,                                                                  
       (*Plan).thrcol);                                                                  
                                                                                         
    block_offset += nblocks;                                                             
  }                                                                                      
                                                                                         
  // update kernel record                                                                
                                                                                         
  timers(&cpu_t2, &wall_t2);                                                             
  OP_kernels[1].name   = name;                                                           
  OP_kernels[1].count += 1;                                                              
  OP_kernels[1].time  += wall_t2 - wall_t1;                                              
}                                                                                        
                                                                                         
